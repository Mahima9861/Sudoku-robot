Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> img
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> cv2.line(img,(15,30),(15,230),(0,0,255),2)
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> cv2.imshow('hb',img)
>>> cv2.line(img,(15,30),(15,230),(0,255,255),2)
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> cv2.line(img,(15,30),(15,230),(0,255,255),2)
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> cv2.imshow('hb',img)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> lines[0]
array([[ 175.        ,    0.78539819]], dtype=float32)
>>> cv2.imshow('uih',imB)
>>> lines
array([[[ 175.        ,    0.78539819]],

       [[ 177.        ,    0.78539819]],

       [[ 173.        ,    0.78539819]],

       ..., 
       [[ -53.        ,    2.93215322]],

       [[ -72.        ,    3.05432606]],

       [[-211.        ,    3.07177949]]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> cv2.imshow('hb',im)
>>> cv2.imshow('hb',im)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> im
array([[ 255.,  255.,  255., ...,  255.,  255.,  255.],
       [ 255.,  255.,  255., ...,  255.,  255.,  255.],
       [ 255.,  255.,  255., ...,  255.,  255.,  255.],
       ..., 
       [ 255.,  255.,  255., ...,  255.,  255.,  255.],
       [ 255.,  255.,  255., ...,  255.,  255.,  255.],
       [ 255.,  255.,  255., ...,  255.,  255.,  255.]])
>>> lines
array([[[ 175.        ,    0.78539819]],

       [[ 177.        ,    0.78539819]],

       [[ 173.        ,    0.78539819]],

       ..., 
       [[  52.        ,    0.94247776]],

       [[  47.        ,    1.01229095]],

       [[-102.        ,    2.23402143]]], dtype=float32)
>>> lines.shape
(5615, 1, 2)
>>> cv2.imshow('hb',img)
>>> 
= RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\test.py =
>>> lines
array([[[  3.61000000e+02,   1.57079637e+00]],

       [[  3.57000000e+02,   1.57079637e+00]],

       [[  3.11000000e+02,   1.57079637e+00]],

       [[  3.04000000e+02,   0.00000000e+00]],

       [[  4.12000000e+02,   1.57079637e+00]],

       [[  2.12000000e+02,   3.49065848e-02]],

       [[  2.57000000e+02,   1.74532924e-02]],

       [[  2.16000000e+02,   3.49065848e-02]],

       [[  2.16000000e+02,   1.57079637e+00]],

       [[ -3.49000000e+02,   3.12413931e+00]],

       [[  2.12000000e+02,   1.57079637e+00]],

       [[  1.69000000e+02,   1.57079637e+00]],

       [[ -3.93000000e+02,   3.10668612e+00]],

       [[ -4.36000000e+02,   3.08923268e+00]],

       [[  2.60000000e+02,   1.74532924e-02]],

       [[  3.02000000e+02,   0.00000000e+00]],

       [[  4.64000000e+02,   1.57079637e+00]],

       [[  8.30000000e+01,   8.72664601e-02]],

       [[  3.08000000e+02,   1.57079637e+00]],

       [[  1.23000000e+02,   6.98131695e-02]],

       [[ -4.97000000e+02,   3.07177949e+00]],

       [[  1.68000000e+02,   5.23598790e-02]],

       [[ -3.45000000e+02,   3.12413931e+00]],

       [[  4.10000000e+02,   1.57079637e+00]],

       [[ -4.84000000e+02,   3.07177949e+00]],

       [[ -3.91000000e+02,   3.10668612e+00]],

       [[  7.90000000e+01,   8.72664601e-02]],

       [[ -4.39000000e+02,   3.08923268e+00]],

       [[  1.71000000e+02,   5.23598790e-02]],

       [[  2.62000000e+02,   1.57079637e+00]],

       [[ -4.91000000e+02,   3.07177949e+00]],

       [[ -5.09000000e+02,   3.07177949e+00]],

       [[ -5.03000000e+02,   3.07177949e+00]]], dtype=float32)
>>> gray
array([[251, 244, 242, ..., 254, 254, 254],
       [255, 249, 249, ..., 254, 254, 254],
       [254, 248, 248, ..., 254, 254, 254],
       ..., 
       [239, 245, 239, ..., 255, 255, 250],
       [250, 255, 250, ..., 250, 250, 246],
       [250, 255, 250, ..., 250, 250, 246]], dtype=uint8)
>>> cv2.imshow('b',gray)
>>> 
= RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\test.py =
>>> gray
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> lines
array([[[  27.        ,    0.        ]],

       [[ 137.        ,    0.        ]],

       [[  55.        ,    1.57079637]],

       [[ 222.        ,    1.57079637]],

       [[  30.        ,    1.57079637]],

       [[ 110.        ,    1.57079637]],

       [[  85.        ,    1.57079637]],

       [[  57.        ,    0.        ]],

       [[  85.        ,    0.        ]],

       [[ 192.        ,    0.        ]],

       [[  29.        ,    0.        ]],

       [[ 194.        ,    0.        ]],

       [[  57.        ,    1.57079637]],

       [[ 139.        ,    0.        ]],

       [[ 164.        ,    0.        ]],

       [[ 112.        ,    1.57079637]],

       [[ 164.        ,    1.57079637]],

       [[ 220.        ,    1.57079637]],

       [[  55.        ,    0.        ]],

       [[   2.        ,    0.        ]],

       [[  28.        ,    1.57079637]],

       [[ 247.        ,    1.57079637]],

       [[ 247.        ,    0.        ]],

       [[ 167.        ,    1.57079637]],

       [[  82.        ,    1.57079637]],

       [[  82.        ,    0.        ]],

       [[   2.        ,    1.57079637]],

       [[ 167.        ,    0.        ]]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 73, in <module>
    lx,ly = img.shape #image weidth and heigth
ValueError: too many values to unpack (expected 2)
>>> 
= RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\test.py =
>>> img.shape
(250, 250, 3)
>>> img.astype
<built-in method astype of numpy.ndarray object at 0x00000090A4DF7DF0>
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
= RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\test.py =
>>> edges
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> gray
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> cv2.imshow('kn',img)
>>> cv2.imshow('kn',imB)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 92, in <module>
    edges = cv2.Canny(gray,50,150,apertureSize = 3)
NameError: name 'gray' is not defined
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> edges
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> edges
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> edges -imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> edges -imB+1
array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ..., 
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=uint8)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> egdes[125]
Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    egdes[125]
NameError: name 'egdes' is not defined
>>> edges[125]
array([  0,   0, 255,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0,
       255,   0,   0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,
         0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0, 255,   0,   0, 255,   0,   0,   0,   0,   0,
         0,   0, 255,   0,   0, 255, 255, 255,   0,   0, 255,   0,   0,
         0,   0,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 255, 255, 255,   0,   0,   0,
       255,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0, 255,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,
         0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       255,   0,   0], dtype=uint8)
>>> imB[125]
array([  0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,
       255, 255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255,   0,   0,   0, 255, 255, 255, 255, 255, 255,
       255, 255, 255,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255,
       255, 255, 255, 255, 255, 255,   0,   0, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,
       255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
         0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
         0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
         0,   0,   0], dtype=uint8)
>>> cv2.imshow('jbi',edges)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> cv2.imshow('jbi',edges)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> help('cv2.connectedComponents')
Help on built-in function connectedComponents in cv2:

cv2.connectedComponents = connectedComponents(...)
    connectedComponents(image[, labels[, connectivity[, ltype]]]) -> retval, labels

>>> out = cv2.connectedComponents(img)
>>> out
(26, array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  1, ...,  4,  0,  0],
       ..., 
       [ 0,  0, 22, ..., 21,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=int32))
>>> out[0]
26
>>> labels = out[1]
>>> labels
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  1, ...,  4,  0,  0],
       ..., 
       [ 0,  0, 22, ..., 21,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=int32)
>>> labels[0]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> labels[1]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> labels[2]
array([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3,
       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
       0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
       3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0], dtype=int32)
>>> cv2.imshow('hb',labels[2])
>>> cv2.invert(imB)
Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    cv2.invert(imB)
cv2.error: C:\projects\opencv-python\opencv\modules\core\src\lapack.cpp:798: error: (-215) type == CV_32F || type == CV_64F in function cv::invert

>>> help('cv2.invert')
Help on built-in function invert in cv2:

cv2.invert = invert(...)
    invert(src[, dst[, flags]]) -> retval, dst

>>> edges
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> edges[125]
array([  0,   0, 255,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0,
       255,   0,   0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,
         0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0, 255,   0,   0, 255,   0,   0,   0,   0,   0,
         0,   0, 255,   0,   0, 255, 255, 255,   0,   0, 255,   0,   0,
         0,   0,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 255, 255, 255,   0,   0,   0,
       255,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0, 255,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,
         0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       255,   0,   0], dtype=uint8)
>>> imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> imB[125]
array([  0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,
       255, 255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255,   0,   0,   0, 255, 255, 255, 255, 255, 255,
       255, 255, 255,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255,
       255, 255, 255, 255, 255, 255,   0,   0, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,
       255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
         0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
         0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
         0,   0,   0], dtype=uint8)
>>> out = cv2.connectedComponents(edges)
>>> labels = out[1]
>>> labels
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int32)
>>> labels[0]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> cv2.imshow('hjbj',labels[0])
>>> cv2.CV_8S
1
>>> out = cv2.connectedComponents(edges,connectivity=4,ltype=cv2.CV_8S)
Traceback (most recent call last):
  File "<pyshell#59>", line 1, in <module>
    out = cv2.connectedComponents(edges,connectivity=4,ltype=cv2.CV_8S)
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\connectedcomponents.cpp:377: error: (-210) the type of labels must be 16u or 32s in function cv::connectedComponents

>>> out = cv2.connectedComponents(edges,connectivity=4)
>>> labels = out[1]
>>> labels[0]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> cv2.imshow('hjbj',labels[0])
>>> imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> cv2.imshow('hjbj',labels)
>>> labels[125]
array([  0,   0, 177,   0,   0,   0,   0,   0,   0,   0, 253,   0,   0,
       254,   0,   0, 248,   0, 240,   0,   0,   0,   0,   0,   0,   0,
         0, 177,   0, 178,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0, 229,   0, 179,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0, 228,   0,   0, 180,   0,   0,   0,   0,   0,
         0,   0, 258,   0,   0, 259, 259, 259,   0,   0, 260,   0,   0,
         0,   0,   0,   0,   0,   0, 180,   0, 181,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 181,   0, 226,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 261, 261, 261,   0,   0,   0,
       262,   0,   0,   0,   0,   0,   0,   0, 226,   0,   0, 230,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 227,   0, 227,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 227,
         0, 227,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       239,   0, 244,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       231,   0,   0], dtype=int32)
>>> labels[125].shape
(250,)
>>> imB[125]
array([  0,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,
       255, 255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255,   0,   0, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255,   0,   0,   0, 255, 255, 255, 255, 255, 255,
       255, 255, 255,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255,
       255, 255, 255, 255, 255, 255,   0,   0, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255,   0, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0,   0,   0,
       255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
       255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,
         0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
         0,   0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
         0,   0,   0], dtype=uint8)
>>> edges[125]
array([  0,   0, 255,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0,
       255,   0,   0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,
         0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0, 255,   0,   0, 255,   0,   0,   0,   0,   0,
         0,   0, 255,   0,   0, 255, 255, 255,   0,   0, 255,   0,   0,
         0,   0,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 255, 255, 255,   0,   0,   0,
       255,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0, 255,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,
         0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       255,   0,   0], dtype=uint8)
>>> sta = out[2]
Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    sta = out[2]
IndexError: tuple index out of range
>>> out[2]
Traceback (most recent call last):
  File "<pyshell#71>", line 1, in <module>
    out[2]
IndexError: tuple index out of range
>>> out.shape
Traceback (most recent call last):
  File "<pyshell#72>", line 1, in <module>
    out.shape
AttributeError: 'tuple' object has no attribute 'shape'
>>> out
(491, array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int32))
>>> out[0]
491
>>> out[2]
Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    out[2]
IndexError: tuple index out of range
>>> out = cv2.connectedComponents(imB,connectivity=4)
>>> out[1]
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int32)
>>> cv2.imshow('hb',out[1])
>>> out.shape
Traceback (most recent call last):
  File "<pyshell#79>", line 1, in <module>
    out.shape
AttributeError: 'tuple' object has no attribute 'shape'
>>> out
(104, array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int32))
>>> I = (255 - imB)/255
>>> I
array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       ..., 
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.]])
>>> out = cv2.connectedComponents(I,connectivity=4)
Traceback (most recent call last):
  File "<pyshell#83>", line 1, in <module>
    out = cv2.connectedComponents(I,connectivity=4)
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\connectedcomponents.cpp:349: error: (-215) iDepth == CV_8U || iDepth == CV_8S in function cv::connectedComponents_sub1

>>> 255 - imB
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ..., 
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)
>>> (255 - imB)/255
array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       ..., 
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.]])
>>> (255 - imB)*1/255
array([[ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       ..., 
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.],
       [ 1.,  1.,  1., ...,  1.,  1.,  1.]])
>>> imB[1]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=uint8)
>>> I = 255 - imB
>>> out = cv2.connectedComponents(I,connectivity=4)
>>> lab = out[1]
>>> out
(32, array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ..., 
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=int32))
>>> cv2.imshow('hb',lab)
>>> lab[125]
array([ 1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0, 15, 15,  0,  0,  0, 15,
       15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,
        0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 16, 16, 16, 16, 16, 16,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 17,
       17, 17, 17,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
        1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1], dtype=int32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> imB[125]
array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], dtype=uint8)
>>> imB[25:50,25:50]
array([[1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1]], dtype=uint8)
>>> imB[25:40,25:40]
array([[1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], dtype=uint8)
>>> I = 1 - imB
>>> I[25:40,25:40]
array([[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8)
>>> out = cv2.connectedComponents(I,connectivity=4)
>>> lab = out[1]
>>> lab
array([[1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       ..., 
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1],
       [1, 1, 1, ..., 1, 1, 1]], dtype=int32)
>>> cv2.imshow('jb',lab)
>>> out = cv2.connectedComponentsWithStats(I,connectivity=4)
>>> lab = out[1]
>>> cv2.imshow('jb',lab)
>>> stat = out[2]
>>> cen = out[3]
>>> cen
array([[ 124.4389319 ,  124.7646218 ],
       [ 125.15615673,  123.25907384],
       [  14.24590164,   14.78688525],
       [  42.89285714,   14.58928571],
       [ 124.69767442,   12.58139535],
       [  14.13636364,   43.        ],
       [  97.08510638,   43.14893617],
       [ 124.75362319,   42.43478261],
       [ 151.71153846,   42.73076923],
       [  42.24242424,   69.45454545],
       [  69.38571429,   69.58571429],
       [ 206.78461538,   70.        ],
       [ 124.16666667,   97.83333333],
       [ 235.23076923,   97.55769231],
       [  14.43055556,   97.95833333],
       [  14.86440678,  124.79661017],
       [  97.        ,  124.72857143],
       [ 152.80769231,  124.42307692],
       [ 234.17948718,  124.79487179],
       [ 124.43396226,  152.75471698],
       [ 233.95384615,  152.46153846],
       [  15.02941176,  150.97058824],
       [  41.828125  ,  179.6875    ],
       [ 179.43396226,  179.88679245],
       [ 206.87142857,  179.67142857],
       [ 152.01492537,  207.04477612],
       [  97.63636364,  207.07272727],
       [ 124.17391304,  208.2826087 ],
       [ 234.32692308,  207.67307692],
       [ 124.48611111,  234.5       ],
       [ 207.30232558,  232.60465116],
       [ 234.84375   ,  234.25      ]])
>>> stat
array([[    3,     3,   244,   244, 50370],
       [    0,     0,   250,   250, 10387],
       [   10,     8,     9,    15,    61],
       [   38,     8,     9,    15,    56],
       [  120,     8,     9,    14,    43],
       [   10,    36,    10,    14,    66],
       [   93,    36,     9,    14,    47],
       [  120,    36,    10,    14,    69],
       [  148,    36,     9,    14,    52],
       [   38,    63,     9,    15,    66],
       [   65,    63,    10,    15,    70],
       [  203,    63,     9,    15,    65],
       [  120,    90,    10,    15,    66],
       [  230,    90,     9,    15,    52],
       [   10,    91,    10,    14,    72],
       [   10,   118,    10,    14,    59],
       [   93,   118,     9,    15,    70],
       [  148,   118,     9,    15,    52],
       [  231,   118,     8,    14,    39],
       [  120,   145,     9,    15,    53],
       [  230,   145,    10,    15,    65],
       [   10,   146,     9,    14,    34],
       [   38,   173,     9,    14,    64],
       [  175,   173,     9,    14,    53],
       [  202,   173,    10,    14,    70],
       [  147,   200,    10,    15,    67],
       [   92,   201,    11,    14,    55],
       [  121,   201,     8,    14,    46],
       [  230,   201,     9,    14,    52],
       [  120,   228,    10,    14,    72],
       [  203,   228,     9,    14,    43],
       [  230,   228,    10,    14,    64]], dtype=int32)
>>> cv2.statsv
Traceback (most recent call last):
  File "<pyshell#111>", line 1, in <module>
    cv2.statsv
AttributeError: module 'cv2.cv2' has no attribute 'statsv'
>>> cv2.imshow('jknj',I)
>>> cv2.imshow('jknj',255*I)
>>> cv2.rectangle(im,(3,3),(3+244,3+244),(0,0,255),2)
array([[[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ..., 
       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]]], dtype=uint8)
>>> cv2.imshow('kjh',im)
>>> cv2.rectangle(im,(3,3),(3+244,3+244),(0,255,0),2)
array([[[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       ..., 
       [[  0,   0, 255],
        [  0,   0, 255],
        [  0, 255,   0],
        ..., 
        [  0, 255,   0],
        [  0, 255,   0],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]]], dtype=uint8)
>>> cv2.imshow('kjh',im)
>>> cv2.rectangle(im,(93,118),(93+9,118+15),(0,255,0),2)
array([[[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       ..., 
       [[  0,   0, 255],
        [  0,   0, 255],
        [  0, 255,   0],
        ..., 
        [  0, 255,   0],
        [  0, 255,   0],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]]], dtype=uint8)
>>> cv2.imshow('kjh',im)
>>> cv2.rectangle(im,(230,145),(230+10,145+15),(0,255,0),2);
array([[[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       ..., 
       [[  0,   0, 255],
        [  0,   0, 255],
        [  0, 255,   0],
        ..., 
        [  0, 255,   0],
        [  0, 255,   0],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]]], dtype=uint8)
>>> cv2.imshow('kjh',im)
>>> t = img[230:240,145:160]
>>> t
array([[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255]], dtype=uint8)
>>> cv2.imshow('jn',t)
>>> cv2.imshow('jn',img)
>>> t = im[147:157,200:215]
>>> t
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
>>> cv2.imshow('jn',t)
>>> cv2.rectangle(im,(147,200),(157,215),(0,0,255),2)
array([[[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       ..., 
       [[  0,   0, 255],
        [  0,   0, 255],
        [  0, 255,   0],
        ..., 
        [  0, 255,   0],
        [  0, 255,   0],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0, 255,   0],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]]], dtype=uint8)
>>> t = cv2.rectangle(im,(147,200),(157,215),(0,0,255),2)
>>> cv2.imshow('jn',t)
>>> t = im[200:215,147:157]
>>> cv2.imshow('jn',t)
>>> t= cv2.resize(t,fx=28,fy=28,interpolation=cv2.INTER_CUBIC)
Traceback (most recent call last):
  File "<pyshell#134>", line 1, in <module>
    t= cv2.resize(t,fx=28,fy=28,interpolation=cv2.INTER_CUBIC)
TypeError: Required argument 'dsize' (pos 2) not found
>>> t= cv2.resize(t,None,fx=28,fy=28,interpolation=cv2.INTER_CUBIC)
>>> cv2.imshow('jn',t)
>>> t.shape
(420, 280, 3)
>>> t = im[228:242,120:130]
>>> t.shape
(14, 10, 3)
>>> cv2.imshow('jn',t)
>>> t = cv2.cvtColor(t,cv2.COLOR_BRG2GRAY)
Traceback (most recent call last):
  File "<pyshell#141>", line 1, in <module>
    t = cv2.cvtColor(t,cv2.COLOR_BRG2GRAY)
AttributeError: module 'cv2.cv2' has no attribute 'COLOR_BRG2GRAY'
>>> t = cv2.cvtColor(t,cv2.COLOR_BGR2GRAY)
>>> t.shape
(14, 10)
>>> t= cv2.resize(t,(28,28),interpolation=cv2.INTER_CUBIC)
>>> t.shape
(28, 28)
>>> cv2.imshow('jn',t)
>>> plt.imshow(t)
<matplotlib.image.AxesImage object at 0x0000009684120F60>
>>> plt.show()
>>> plt.imshow(t,cmap='binary')
<matplotlib.image.AxesImage object at 0x000000968556A358>
>>> plt.show()
>>> plt.imshow(t,cmap='gray')
<matplotlib.image.AxesImage object at 0x00000096855D17B8>
>>> plt.show()
>>> 
plt.show()
>>> plt.show()
>>> plt.imshow(t,cmap='gray')
<matplotlib.image.AxesImage object at 0x0000009685C47C18>
>>> plt.show()
>>> stat
array([[    3,     3,   244,   244, 50370],
       [    0,     0,   250,   250, 10387],
       [   10,     8,     9,    15,    61],
       [   38,     8,     9,    15,    56],
       [  120,     8,     9,    14,    43],
       [   10,    36,    10,    14,    66],
       [   93,    36,     9,    14,    47],
       [  120,    36,    10,    14,    69],
       [  148,    36,     9,    14,    52],
       [   38,    63,     9,    15,    66],
       [   65,    63,    10,    15,    70],
       [  203,    63,     9,    15,    65],
       [  120,    90,    10,    15,    66],
       [  230,    90,     9,    15,    52],
       [   10,    91,    10,    14,    72],
       [   10,   118,    10,    14,    59],
       [   93,   118,     9,    15,    70],
       [  148,   118,     9,    15,    52],
       [  231,   118,     8,    14,    39],
       [  120,   145,     9,    15,    53],
       [  230,   145,    10,    15,    65],
       [   10,   146,     9,    14,    34],
       [   38,   173,     9,    14,    64],
       [  175,   173,     9,    14,    53],
       [  202,   173,    10,    14,    70],
       [  147,   200,    10,    15,    67],
       [   92,   201,    11,    14,    55],
       [  121,   201,     8,    14,    46],
       [  230,   201,     9,    14,    52],
       [  120,   228,    10,    14,    72],
       [  203,   228,     9,    14,    43],
       [  230,   228,    10,    14,    64]], dtype=int32)
>>> stat.shape
(32, 5)
>>> cv2.imshow('hjb',im)
>>> out = cv2.connectedComponentsWithStats(I,connectivity=8)
>>> stat = out[2]
>>> cen = out[3]
>>> lab = out[1]
>>> stat.shape
(32, 5)
>>> stat
array([[    3,     3,   244,   244, 50370],
       [    0,     0,   250,   250, 10387],
       [   10,     8,     9,    15,    61],
       [   38,     8,     9,    15,    56],
       [  120,     8,     9,    14,    43],
       [   10,    36,    10,    14,    66],
       [   93,    36,     9,    14,    47],
       [  120,    36,    10,    14,    69],
       [  148,    36,     9,    14,    52],
       [   38,    63,     9,    15,    66],
       [   65,    63,    10,    15,    70],
       [  203,    63,     9,    15,    65],
       [  120,    90,    10,    15,    66],
       [  230,    90,     9,    15,    52],
       [   10,    91,    10,    14,    72],
       [   10,   118,    10,    14,    59],
       [   93,   118,     9,    15,    70],
       [  148,   118,     9,    15,    52],
       [  231,   118,     8,    14,    39],
       [  120,   145,     9,    15,    53],
       [  230,   145,    10,    15,    65],
       [   10,   146,     9,    14,    34],
       [   38,   173,     9,    14,    64],
       [  175,   173,     9,    14,    53],
       [  202,   173,    10,    14,    70],
       [  147,   200,    10,    15,    67],
       [   92,   201,    11,    14,    55],
       [  121,   201,     8,    14,    46],
       [  230,   201,     9,    14,    52],
       [  120,   228,    10,    14,    72],
       [  203,   228,     9,    14,    43],
       [  230,   228,    10,    14,    64]], dtype=int32)
>>> cen
array([[ 124.4389319 ,  124.7646218 ],
       [ 125.15615673,  123.25907384],
       [  14.24590164,   14.78688525],
       [  42.89285714,   14.58928571],
       [ 124.69767442,   12.58139535],
       [  14.13636364,   43.        ],
       [  97.08510638,   43.14893617],
       [ 124.75362319,   42.43478261],
       [ 151.71153846,   42.73076923],
       [  42.24242424,   69.45454545],
       [  69.38571429,   69.58571429],
       [ 206.78461538,   70.        ],
       [ 124.16666667,   97.83333333],
       [ 235.23076923,   97.55769231],
       [  14.43055556,   97.95833333],
       [  14.86440678,  124.79661017],
       [  97.        ,  124.72857143],
       [ 152.80769231,  124.42307692],
       [ 234.17948718,  124.79487179],
       [ 124.43396226,  152.75471698],
       [ 233.95384615,  152.46153846],
       [  15.02941176,  150.97058824],
       [  41.828125  ,  179.6875    ],
       [ 179.43396226,  179.88679245],
       [ 206.87142857,  179.67142857],
       [ 152.01492537,  207.04477612],
       [  97.63636364,  207.07272727],
       [ 124.17391304,  208.2826087 ],
       [ 234.32692308,  207.67307692],
       [ 124.48611111,  234.5       ],
       [ 207.30232558,  232.60465116],
       [ 234.84375   ,  234.25      ]])
>>> lines[0]
array([[ 27.,   0.]], dtype=float32)
>>> lines[1]
array([[ 137.,    0.]], dtype=float32)
>>> lines[2]
array([[ 55.        ,   1.57079637]], dtype=float32)
>>> lines[3]
array([[ 222.        ,    1.57079637]], dtype=float32)
>>> lines[4]
array([[ 30.        ,   1.57079637]], dtype=float32)
>>> lines[7]
array([[ 57.,   0.]], dtype=float32)
>>> lines[17]
array([[ 220.        ,    1.57079637]], dtype=float32)
>>> lines[-1]
array([[ 26.        ,   1.58824956]], dtype=float32)
>>> lines[-1][0]
array([ 26.        ,   1.58824956], dtype=float32)
>>> lines[-1][1]
Traceback (most recent call last):
  File "<pyshell#176>", line 1, in <module>
    lines[-1][1]
IndexError: index 1 is out of bounds for axis 0 with size 1
>>> i=0
>>> i +=1
>>> i
1
>>> i +/=1
SyntaxError: invalid syntax
>>> i +=/1
SyntaxError: invalid syntax
>>> i /+=1
SyntaxError: invalid syntax
>>> lines[0]/2
array([[ 13.5,   0. ]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 99, in <module>
    grid[i] = lines[i][0]
IndexError: index 20 is out of bounds for axis 0 with size 20
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 100, in <module>
    grid[j] = lines[i][0]
IndexError: index 20 is out of bounds for axis 0 with size 20
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 100, in <module>
    grid[j] = lines[i][0]
IndexError: index 20 is out of bounds for axis 0 with size 20
>>> lines.shape
(57, 1, 2)
>>> lines
array([[[  2.70000000e+01,   0.00000000e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.47000000e+02,   1.57079637e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  2.60000000e+01,   1.58824956e+00]]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 100, in <module>
    grid[j] = lines[i][0]
IndexError: index 20 is out of bounds for axis 0 with size 20
>>> lines[1][0]
array([ 137.,    0.], dtype=float32)
>>> grid[0]
array([ 27.,   0.])
>>> lines[0][0]
array([ 27.,   0.], dtype=float32)
>>> grid[10]
array([ 29.,   0.])
>>> help('np.sort')
No Python documentation found for 'np.sort'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

>>> np.sort(lines)
array([[[  0.00000000e+00,   2.70000000e+01]],

       [[  0.00000000e+00,   1.37000000e+02]],

       [[  1.57079637e+00,   5.50000000e+01]],

       [[  1.57079637e+00,   2.22000000e+02]],

       [[  1.57079637e+00,   3.00000000e+01]],

       [[  1.57079637e+00,   1.10000000e+02]],

       [[  1.57079637e+00,   8.50000000e+01]],

       [[  0.00000000e+00,   5.70000000e+01]],

       [[  0.00000000e+00,   8.50000000e+01]],

       [[  0.00000000e+00,   1.92000000e+02]],

       [[  0.00000000e+00,   2.90000000e+01]],

       [[  0.00000000e+00,   1.94000000e+02]],

       [[  1.57079637e+00,   5.70000000e+01]],

       [[  0.00000000e+00,   1.39000000e+02]],

       [[  0.00000000e+00,   1.64000000e+02]],

       [[  1.57079637e+00,   1.12000000e+02]],

       [[  1.57079637e+00,   1.64000000e+02]],

       [[  1.57079637e+00,   2.20000000e+02]],

       [[  0.00000000e+00,   5.50000000e+01]],

       [[  0.00000000e+00,   2.00000000e+00]],

       [[  1.57079637e+00,   2.80000000e+01]],

       [[  1.57079637e+00,   2.47000000e+02]],

       [[  0.00000000e+00,   2.47000000e+02]],

       [[  1.57079637e+00,   1.67000000e+02]],

       [[  1.57079637e+00,   8.20000000e+01]],

       [[  0.00000000e+00,   8.20000000e+01]],

       [[  1.57079637e+00,   2.00000000e+00]],

       [[  0.00000000e+00,   1.67000000e+02]],

       [[  0.00000000e+00,   1.12000000e+02]],

       [[  1.57079637e+00,   1.95000000e+02]],

       [[  0.00000000e+00,   2.22000000e+02]],

       [[  0.00000000e+00,   1.10000000e+02]],

       [[  1.57079637e+00,   1.93000000e+02]],

       [[  0.00000000e+00,   2.20000000e+02]],

       [[  1.55334306e+00,   1.96000000e+02]],

       [[  1.74532924e-02,   2.23000000e+02]],

       [[  1.57079637e+00,   1.40000000e+02]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.57079637e+00,   1.38000000e+02]],

       [[  1.74532924e-02,   1.13000000e+02]],

       [[  1.74532924e-02,   1.95000000e+02]],

       [[  1.55334306e+00,   5.80000000e+01]],

       [[  1.55334306e+00,   1.13000000e+02]],

       [[  1.55334306e+00,   2.23000000e+02]],

       [[  1.58824956e+00,   5.40000000e+01]],

       [[  1.74532924e-02,   1.40000000e+02]],

       [[  1.58824956e+00,   1.09000000e+02]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  1.58824956e+00,   2.19000000e+02]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  1.74532924e-02,   3.00000000e+01]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  1.74532924e-02,   5.80000000e+01]],

       [[  1.58824956e+00,   1.36000000e+02]],

       [[  1.55334306e+00,   1.42000000e+02]],

       [[  1.58824956e+00,   2.60000000e+01]]], dtype=float32)
>>> np.sort([1,5,-1])
array([-1,  1,  5])
>>> np.sort(lines,axis=lines[0][0])
Traceback (most recent call last):
  File "<pyshell#193>", line 1, in <module>
    np.sort(lines,axis=lines[0][0])
  File "C:\python35\lib\site-packages\numpy\core\fromnumeric.py", line 824, in sort
    a.sort(axis, kind, order)
TypeError: only length-1 arrays can be converted to Python scalars
>>> np.sort(lines,axis=0)
array([[[ -1.91000000e+02,   0.00000000e+00]],

       [[ -1.36000000e+02,   0.00000000e+00]],

       [[ -1.09000000e+02,   0.00000000e+00]],

       [[ -5.40000000e+01,   0.00000000e+00]],

       [[ -2.60000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.60000000e+01,   0.00000000e+00]],

       [[  2.70000000e+01,   0.00000000e+00]],

       [[  2.80000000e+01,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  3.00000000e+01,   0.00000000e+00]],

       [[  3.00000000e+01,   0.00000000e+00]],

       [[  5.40000000e+01,   0.00000000e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  8.20000000e+01,   1.74532924e-02]],

       [[  8.20000000e+01,   1.74532924e-02]],

       [[  8.50000000e+01,   1.74532924e-02]],

       [[  8.50000000e+01,   1.74532924e-02]],

       [[  1.09000000e+02,   1.55334306e+00]],

       [[  1.10000000e+02,   1.55334306e+00]],

       [[  1.10000000e+02,   1.55334306e+00]],

       [[  1.12000000e+02,   1.55334306e+00]],

       [[  1.12000000e+02,   1.55334306e+00]],

       [[  1.13000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.57079637e+00]],

       [[  1.36000000e+02,   1.57079637e+00]],

       [[  1.37000000e+02,   1.57079637e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.39000000e+02,   1.57079637e+00]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[  1.42000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  1.92000000e+02,   1.57079637e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  1.94000000e+02,   1.57079637e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  1.96000000e+02,   1.58824956e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[  2.20000000e+02,   1.58824956e+00]],

       [[  2.20000000e+02,   1.58824956e+00]],

       [[  2.22000000e+02,   1.58824956e+00]],

       [[  2.22000000e+02,   3.12413931e+00]],

       [[  2.23000000e+02,   3.12413931e+00]],

       [[  2.23000000e+02,   3.12413931e+00]],

       [[  2.47000000e+02,   3.12413931e+00]],

       [[  2.47000000e+02,   3.12413931e+00]]], dtype=float32)
>>> np.sort(lines,axis=1)
array([[[  2.70000000e+01,   0.00000000e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.47000000e+02,   1.57079637e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  2.60000000e+01,   1.58824956e+00]]], dtype=float32)
>>> np.sort(lines,axis=['f1'])
Traceback (most recent call last):
  File "<pyshell#196>", line 1, in <module>
    np.sort(lines,axis=['f1'])
  File "C:\python35\lib\site-packages\numpy\core\fromnumeric.py", line 824, in sort
    a.sort(axis, kind, order)
TypeError: an integer is required (got type list)
>>> np.sort(lines.view('i8,i8,i8'),order=['f1'],axis=0).view(np.int)
Traceback (most recent call last):
  File "<pyshell#197>", line 1, in <module>
    np.sort(lines.view('i8,i8,i8'),order=['f1'],axis=0).view(np.int)
ValueError: new type not compatible with array.
>>> np.sort(lines.view('i8,i8,i8'),order=['f1'],axis=0)
Traceback (most recent call last):
  File "<pyshell#198>", line 1, in <module>
    np.sort(lines.view('i8,i8,i8'),order=['f1'],axis=0)
ValueError: new type not compatible with array.
>>> np.sort(lines.view('i8,i8,i8'),order=[0]['f1'],axis=0)
Traceback (most recent call last):
  File "<pyshell#199>", line 1, in <module>
    np.sort(lines.view('i8,i8,i8'),order=[0]['f1'],axis=0)
ValueError: new type not compatible with array.
>>> help('sorted')
Help on built-in function sorted in module builtins:

sorted(iterable, key=None, reverse=False)
    Return a new list containing all items from the iterable in ascending order.
    
    A custom key function can be supplied to customise the sort order, and the
    reverse flag can be set to request the result in descending order.

>>> sorted(lines,key=lambda row:row[1][1])
Traceback (most recent call last):
  File "<pyshell#201>", line 1, in <module>
    sorted(lines,key=lambda row:row[1][1])
  File "<pyshell#201>", line 1, in <lambda>
    sorted(lines,key=lambda row:row[1][1])
IndexError: index 1 is out of bounds for axis 0 with size 1
>>> sorted(lines,key=lambda row:row[1])
Traceback (most recent call last):
  File "<pyshell#202>", line 1, in <module>
    sorted(lines,key=lambda row:row[1])
  File "<pyshell#202>", line 1, in <lambda>
    sorted(lines,key=lambda row:row[1])
IndexError: index 1 is out of bounds for axis 0 with size 1
>>> sorted(lines,key=lambda row: row[1])
Traceback (most recent call last):
  File "<pyshell#203>", line 1, in <module>
    sorted(lines,key=lambda row: row[1])
  File "<pyshell#203>", line 1, in <lambda>
    sorted(lines,key=lambda row: row[1])
IndexError: index 1 is out of bounds for axis 0 with size 1
>>> sorted(lines,key=lambda row: row[0])
Traceback (most recent call last):
  File "<pyshell#204>", line 1, in <module>
    sorted(lines,key=lambda row: row[0])
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> sorted(lines,key=lambda lines_entry: lines_entry[0])
Traceback (most recent call last):
  File "<pyshell#205>", line 1, in <module>
    sorted(lines,key=lambda lines_entry: lines_entry[0])
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> lines.shape
(57, 1, 2)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri_insertion(lines,eps_rho,eps_theta)
Traceback (most recent call last):
  File "<pyshell#207>", line 1, in <module>
    tri_insertion(lines,eps_rho,eps_theta)
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 74, in tri_insertion
    if(abs(lines[j][0][0]-lines[j+1][0][0])>eps_rho and abs(lines[j][0][1]-lines[j+1][0][1])<eps_theta):
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri_insertion(lines,eps_rho,eps_theta)
Traceback (most recent call last):
  File "<pyshell#208>", line 1, in <module>
    tri_insertion(lines,eps_rho,eps_theta)
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 76, in tri_insertion
    if(lines[j][0][0]>lines[j+1][0][0]):
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri_insertion(lines,eps_rho,eps_theta)
Traceback (most recent call last):
  File "<pyshell#209>", line 1, in <module>
    tri_insertion(lines,eps_rho,eps_theta)
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 74, in tri_insertion
    if(abs(lines[j][0][0]-lines[j+1][0][0])>eps_rho and abs(lines[j][0][1]-lines[j+1][0][1])<eps_theta):
IndexError: index 57 is out of bounds for axis 0 with size 57
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri = tri_insertion(lines,eps_rho,eps_theta)
>>> tri
array([[[  2.70000000e+01,   0.00000000e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  2.60000000e+01,   1.58824956e+00]],

       [[  2.60000000e+01,   1.58824956e+00]],

       [[  2.60000000e+01,   1.58824956e+00]]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri = tri_insertion(lines,eps_rho,eps_theta)
>>> tri
array([[[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-136.        ,    3.12413931]],

       [[-136.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]]], dtype=float32)
>>> lines
array([[[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-136.        ,    3.12413931]],

       [[-136.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]]], dtype=float32)
>>> lines.shape
(57, 1, 2)
>>> tri.shape
(57, 1, 2)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri = tri_insertion(lines,eps_rho,eps_theta)
>>> tri
array([[[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-191.        ,    3.12413931]],

       [[-136.        ,    3.12413931]],

       [[-136.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[ -54.        ,    3.12413931]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]],

       [[  26.        ,    1.58824956]]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> lines
array([[[  2.70000000e+01,   0.00000000e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.47000000e+02,   1.57079637e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  2.60000000e+01,   1.58824956e+00]]], dtype=float32)
>>> lines[0],lines[1]=lines[1],lines[0]
>>> lines
array([[[  1.37000000e+02,   0.00000000e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.47000000e+02,   1.57079637e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  2.60000000e+01,   1.58824956e+00]]], dtype=float32)
>>> x = 1,y=2
SyntaxError: can't assign to literal
>>> x=1
>>> y=2
>>> x,y=y,x
>>> x
2
>>> y
1
>>> x=[1,2]
>>> y=[3,4]
>>> x,y=y,x
>>> x
[3, 4]
>>> y
[1, 2]
>>> x=np.array([[1,2]])
>>> y=np.array([[3,4]])
>>> x,y=y,x
>>> x
array([[3, 4]])
>>> y
array([[1, 2]])
>>> lines
array([[[  1.37000000e+02,   0.00000000e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.47000000e+02,   1.57079637e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[ -1.91000000e+02,   3.12413931e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  2.60000000e+01,   1.58824956e+00]]], dtype=float32)
>>> lines[0]
array([[ 137.,    0.]], dtype=float32)
>>> lines[0].shape
(1, 2)
>>> x.shape
(1, 2)
>>> x,lines[0]=lines[0],x
>>> x
array([[ 3.,  4.]], dtype=float32)
>>> lines[0]
array([[ 3.,  4.]], dtype=float32)
>>> lines[0]=np.array([[ 137.,    0.]], dtype=float32)
Traceback (most recent call last):
  File "<pyshell#245>", line 1, in <module>
    lines[0]=np.array([[ 137.,    0.]], dtype=float32)
NameError: name 'float32' is not defined
>>> lines[0]=np.array([[ 137.,    0.]])
>>> lines[0][0],x[0]=x[0],lines[0][0]
>>> x
array([[ 137.,    0.]], dtype=float32)
>>> lines[0]
array([[ 137.,    0.]], dtype=float32)
>>> x = np.array([[ 3.,  4.]])
>>> lines[0][0](0],x[0][0]=x[0][0],lines[0][0][0]
SyntaxError: invalid syntax
>>> lines[0][0][0],x[0][0]=x[0][0],lines[0][0][0]
>>> x
array([[ 137.,    4.]])
>>> lines[0]
array([[ 3.,  0.]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> tri = tri_insertion(lines,eps_rho,eps_theta)
>>> tri
array([[[ -1.91000000e+02,   3.12413931e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  2.70000000e+01,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.60000000e+01,   1.58824956e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  2.47000000e+02,   1.57079637e+00]]], dtype=float32)
>>> lines
array([[[ -1.91000000e+02,   3.12413931e+00]],

       [[ -1.36000000e+02,   3.12413931e+00]],

       [[ -1.09000000e+02,   3.12413931e+00]],

       [[ -5.40000000e+01,   3.12413931e+00]],

       [[ -2.60000000e+01,   3.12413931e+00]],

       [[  2.00000000e+00,   0.00000000e+00]],

       [[  2.00000000e+00,   1.57079637e+00]],

       [[  2.70000000e+01,   0.00000000e+00]],

       [[  2.90000000e+01,   0.00000000e+00]],

       [[  3.00000000e+01,   1.74532924e-02]],

       [[  3.00000000e+01,   1.57079637e+00]],

       [[  2.80000000e+01,   1.57079637e+00]],

       [[  2.60000000e+01,   1.58824956e+00]],

       [[  5.70000000e+01,   0.00000000e+00]],

       [[  5.50000000e+01,   0.00000000e+00]],

       [[  5.80000000e+01,   1.74532924e-02]],

       [[  5.50000000e+01,   1.57079637e+00]],

       [[  5.70000000e+01,   1.57079637e+00]],

       [[  5.80000000e+01,   1.55334306e+00]],

       [[  5.40000000e+01,   1.58824956e+00]],

       [[  8.50000000e+01,   0.00000000e+00]],

       [[  8.20000000e+01,   0.00000000e+00]],

       [[  8.50000000e+01,   1.57079637e+00]],

       [[  8.20000000e+01,   1.57079637e+00]],

       [[  1.12000000e+02,   0.00000000e+00]],

       [[  1.10000000e+02,   0.00000000e+00]],

       [[  1.13000000e+02,   1.74532924e-02]],

       [[  1.10000000e+02,   1.57079637e+00]],

       [[  1.12000000e+02,   1.57079637e+00]],

       [[  1.13000000e+02,   1.55334306e+00]],

       [[  1.09000000e+02,   1.58824956e+00]],

       [[  1.37000000e+02,   0.00000000e+00]],

       [[  1.39000000e+02,   0.00000000e+00]],

       [[  1.40000000e+02,   1.74532924e-02]],

       [[  1.40000000e+02,   1.57079637e+00]],

       [[  1.38000000e+02,   1.57079637e+00]],

       [[  1.36000000e+02,   1.58824956e+00]],

       [[  1.42000000e+02,   1.55334306e+00]],

       [[  1.64000000e+02,   0.00000000e+00]],

       [[  1.67000000e+02,   0.00000000e+00]],

       [[  1.64000000e+02,   1.57079637e+00]],

       [[  1.67000000e+02,   1.57079637e+00]],

       [[  1.92000000e+02,   0.00000000e+00]],

       [[  1.94000000e+02,   0.00000000e+00]],

       [[  1.95000000e+02,   1.74532924e-02]],

       [[  1.95000000e+02,   1.57079637e+00]],

       [[  1.93000000e+02,   1.57079637e+00]],

       [[  1.96000000e+02,   1.55334306e+00]],

       [[  2.22000000e+02,   0.00000000e+00]],

       [[  2.20000000e+02,   0.00000000e+00]],

       [[  2.23000000e+02,   1.74532924e-02]],

       [[  2.22000000e+02,   1.57079637e+00]],

       [[  2.20000000e+02,   1.57079637e+00]],

       [[  2.23000000e+02,   1.55334306e+00]],

       [[  2.19000000e+02,   1.58824956e+00]],

       [[  2.47000000e+02,   0.00000000e+00]],

       [[  2.47000000e+02,   1.57079637e+00]]], dtype=float32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 113, in <module>
    tri_insertion(lines,eps_rho,eps_theta)
NameError: name 'eps_rho' is not defined
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 119, in <module>
    if(abs(lines[i][0][0] - grid[j-1][0]) > eps_rho or abs(lines[i][0][1] - grid[j-1][1]) > eps_theta):
IndexError: index 20 is out of bounds for axis 0 with size 20
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 119, in <module>
    if(abs(lines[i][0][0] - grid[j-1][0]) > eps_rho or abs(lines[i][0][1] - grid[j-1][1]) > eps_theta):
IndexError: index 24 is out of bounds for axis 0 with size 24
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 119, in <module>
    if(abs(lines[i][0][0] - grid[j-1][0]) > eps_rho or abs(lines[i][0][1] - grid[j-1][1]) > eps_theta):
IndexError: index 30 is out of bounds for axis 0 with size 30
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 120, in <module>
    grid[j] = lines[i][0]
IndexError: index 20 is out of bounds for axis 0 with size 20
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 120, in <module>
    grid[j] = lines[i][0]
IndexError: index 24 is out of bounds for axis 0 with size 24
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> grid
array([[  2.00000000e+00,   1.57079637e+00],
       [  2.90000000e+01,   8.72664619e-03],
       [  2.75000000e+01,   1.57952297e+00],
       [  5.70000000e+01,   8.72664619e-03],
       [  5.55000000e+01,   1.57515964e+00],
       [  8.35000000e+01,   0.00000000e+00],
       [  8.35000000e+01,   1.57079637e+00],
       [  1.12000000e+02,   8.72664619e-03],
       [  1.10500000e+02,   1.57515964e+00],
       [  1.39000000e+02,   8.72664619e-03],
       [  1.39750000e+02,   1.56643301e+00],
       [  1.65500000e+02,   0.00000000e+00],
       [  1.65500000e+02,   1.57079637e+00],
       [  1.94000000e+02,   8.72664619e-03],
       [  1.95000000e+02,   1.56206971e+00],
       [  2.22000000e+02,   8.72664619e-03],
       [  2.20500000e+02,   1.57515964e+00],
       [  2.47000000e+02,   0.00000000e+00],
       [  2.47000000e+02,   1.57079637e+00],
       [  1.00000000e+00,   0.00000000e+00]])
>>> grid.shape
(20, 2)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 143, in <module>
    if(ord(k)=='c'):
TypeError: ord() expected string of length 1, but int found
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> out = cv2.connectedComponentsWithStats(I,connectivity=4)
Traceback (most recent call last):
  File "<pyshell#260>", line 1, in <module>
    out = cv2.connectedComponentsWithStats(I,connectivity=4)
NameError: name 'I' is not defined
>>> out = cv2.connectedComponentsWithStats(edges,connectivity=4)
>>> lab = out[1]
>>> lab
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int32)
>>> lab[0]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> lab[1]
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> [sum(lab[i]) for i in range(lab.shape[0])]
[0, 0, 1055, 340, 253, 253, 253, 303, 890, 488, 806, 456, 503, 639, 595, 713, 637, 541, 552, 565, 1172, 671, 1170, 253, 253, 253, 253, 366, 4494, 89, 12041, 908, 908, 908, 908, 2532, 1533, 2426, 1795, 1649, 2290, 1873, 2367, 2131, 1895, 1990, 1719, 2199, 2642, 2727, 1999, 908, 908, 908, 908, 12054, 321, 19494, 1512, 1523, 1523, 1523, 2357, 3499, 3656, 2677, 2842, 3284, 3855, 2782, 4351, 2973, 3792, 3036, 3236, 4362, 3113, 4806, 1523, 1523, 1523, 2491, 28417, 0, 0, 42560, 3251, 3251, 3251, 3251, 6973, 4755, 6832, 5175, 4793, 5790, 5832, 5249, 6903, 5686, 5275, 5275, 6370, 6231, 6255, 5481, 3251, 3251, 3251, 3251, 42742, 1836, 46446, 3653, 3711, 3711, 3711, 5106, 8212, 7307, 8021, 6390, 6894, 8123, 6210, 7529, 7825, 7557, 6774, 7400, 9960, 5826, 9513, 3711, 3711, 3711, 3711, 25974, 25482, 24713, 40023, 4853, 4853, 4853, 4853, 11763, 7158, 10902, 6598, 6599, 8083, 6909, 8107, 8132, 7535, 7541, 7256, 8493, 7286, 10250, 5481, 4853, 4853, 5074, 61031, 0, 0, 67941, 8181, 5897, 5897, 5897, 9287, 10705, 10063, 10451, 8733, 9471, 10931, 8795, 10318, 9999, 10015, 10423, 10454, 13119, 8978, 14367, 5897, 5897, 5897, 5897, 22826, 56366, 19624, 74256, 7129, 7129, 7129, 7129, 15632, 11185, 15696, 12044, 12045, 13661, 12446, 15363, 11223, 15353, 11702, 14499, 15938, 10518, 16994, 8442, 7129, 7129, 7129, 7511, 91323, 2378, 96405, 7294, 7294, 7294, 7294, 13039, 12206, 14478, 13177, 11845, 12316, 13226, 11456, 13775, 11962, 12926, 11033, 12468, 13910, 11579, 12579, 7294, 7294, 7294, 9585, 98182, 0, 0]
>>> lab[125][125]
0
>>> lab[125][126]
0
>>> lab[125][122]
0
>>> lab[125]
array([  0,   0, 177,   0,   0,   0,   0,   0,   0,   0, 253,   0,   0,
       254,   0,   0, 248,   0, 240,   0,   0,   0,   0,   0,   0,   0,
         0, 177,   0, 178,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0, 229,   0, 179,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0, 228,   0,   0, 180,   0,   0,   0,   0,   0,
         0,   0, 258,   0,   0, 259, 259, 259,   0,   0, 260,   0,   0,
         0,   0,   0,   0,   0,   0, 180,   0, 181,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 181,   0, 226,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0, 261, 261, 261,   0,   0,   0,
       262,   0,   0,   0,   0,   0,   0,   0, 226,   0,   0, 230,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 227,   0, 227,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 227,
         0, 227,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       239,   0, 244,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       231,   0,   0], dtype=int32)
>>> lab[122:125,122:125]
array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]], dtype=int32)
>>> lab[110:125,110:125]
array([[180,   0, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
        181, 181],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
        181, 181],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]], dtype=int32)
>>> lab[115:125,115:125]
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=int32)
>>> lab[110:120,110:120]
array([[180,   0, 181, 181, 181, 181, 181, 181, 181, 181],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181, 181, 181, 181, 181, 181, 181, 181],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0],
       [180,   0, 181,   0,   0,   0,   0,   0,   0,   0]], dtype=int32)
>>> stat = out[2]
>>> stat
array([[    0,     0,   250,   250, 52551],
       [    2,     2,    26,    81,   274],
       [   31,     2,    23,     1,    23],
       ..., 
       [   86,   247,    23,     1,    23],
       [  141,   247,    23,     1,    23],
       [  223,   247,    23,     1,    23]], dtype=int32)
>>> cent = out[3]
>>> cent
array([[ 124.51709768,  124.46313105],
       [  15.95255474,   44.59854015],
       [  42.        ,    2.        ],
       [  69.        ,    2.        ],
       [  97.        ,    2.        ],
       [ 139.94193548,   17.3483871 ],
       [ 152.        ,    2.        ],
       [ 179.5       ,    2.        ],
       [ 202.44155844,   15.32467532],
       [ 234.        ,    2.        ],
       [   3.        ,    3.        ],
       [  29.07407407,   15.        ],
       [  54.92592593,   15.        ],
       [  67.34868421,   35.39473684],
       [  81.        ,    3.        ],
       [  85.03846154,   15.46153846],
       [ 106.33333333,   18.66666667],
       [ 168.        ,    3.        ],
       [ 191.92592593,   15.        ],
       [ 225.53246753,   18.90909091],
       [ 246.        ,    3.        ],
       [   2.        ,   15.        ],
       [  82.        ,   15.        ],
       [ 167.        ,   15.        ],
       [ 247.        ,   15.        ],
       [  41.5       ,    7.        ],
       [  14.375     ,    8.125     ],
       [  38.85714286,    9.        ],
       [  44.        ,    8.        ],
       [ 124.5       ,    8.16666667],
       [  10.        ,   11.        ],
       [  41.5       ,    9.        ],
       [  46.        ,   11.        ],
       [  13.66666667,   10.16666667],
       [  43.        ,   10.        ],
       [ 124.33333333,   10.16666667],
       [ 128.        ,   11.        ],
       [  44.        ,   11.5       ],
       [  13.5       ,   12.        ],
       [ 125.        ,   13.        ],
       [  16.        ,   13.        ],
       [  42.        ,   13.        ],
       [ 127.        ,   14.        ],
       [  12.5       ,   14.        ],
       [  15.23076923,   19.73076923],
       [  45.        ,   14.        ],
       [  16.33333333,   16.16666667],
       [  41.        ,   15.        ],
       [  46.        ,   16.        ],
       [ 124.        ,   16.        ],
       [  43.8       ,   17.2       ],
       [ 126.        ,   16.5       ],
       [  47.        ,   18.        ],
       [ 123.        ,   18.5       ],
       [ 125.        ,   19.        ],
       [  16.        ,   19.        ],
       [  42.91666667,   21.41666667],
       [  39.625     ,   20.125     ],
       [ 122.        ,   21.        ],
       [ 124.        ,   21.5       ],
       [   3.        ,   27.        ],
       [ 204.88449848,   41.39817629],
       [  42.        ,   28.        ],
       [  42.        ,   52.39779006],
       [  97.56497175,   52.3220339 ],
       [ 133.61258278,   51.35430464],
       [  15.5       ,   35.        ],
       [  97.6       ,   39.4       ],
       [ 125.55555556,   35.44444444],
       [ 151.11428571,   38.22857143],
       [  12.        ,   36.        ],
       [  93.5       ,   36.        ],
       [ 121.        ,   36.        ],
       [  11.56521739,   41.56521739],
       [  15.28571429,   37.28571429],
       [  95.84615385,   42.        ],
       [ 120.        ,   40.        ],
       [ 124.        ,   37.        ],
       [ 122.16666667,   40.33333333],
       [ 126.        ,   38.        ],
       [ 129.        ,   42.        ],
       [ 127.        ,   40.        ],
       [  18.        ,   41.        ],
       [  14.75      ,   44.        ],
       [  19.        ,   45.        ],
       [ 126.        ,   42.        ],
       [ 155.36363636,   46.36363636],
       [ 124.5       ,   43.        ],
       [ 153.8       ,   44.2       ],
       [ 121.5       ,   44.        ],
       [ 127.        ,   44.5       ],
       [ 124.        ,   45.        ],
       [ 125.66666667,   46.66666667],
       [  13.        ,   47.        ],
       [  99.        ,   47.        ],
       [ 128.        ,   47.5       ],
       [ 149.        ,   47.        ],
       [ 153.        ,   47.        ],
       [  14.5       ,   48.        ],
       [  94.        ,   48.5       ],
       [ 100.66666667,   48.33333333],
       [ 122.2       ,   48.2       ],
       [ 147.66666667,   48.66666667],
       [ 151.        ,   48.        ],
       [  12.5       ,   49.        ],
       [  17.5       ,   49.        ],
       [  97.        ,   49.        ],
       [ 126.        ,   49.        ],
       [  15.        ,   50.        ],
       [ 123.        ,   50.        ],
       [ 150.5       ,   50.        ],
       [  63.48      ,   63.02      ],
       [ 151.34666667,   65.32      ],
       [ 190.8828125 ,   66.7734375 ],
       [ 225.65333333,   65.64      ],
       [  82.        ,   69.5       ],
       [ 167.        ,   69.5       ],
       [ 247.        ,   69.5       ],
       [  41.5       ,   62.        ],
       [  69.5       ,   62.        ],
       [ 208.        ,   62.        ],
       [  39.5       ,   63.        ],
       [  45.125     ,   64.375     ],
       [  65.77777778,   64.77777778],
       [  73.44444444,   68.05555556],
       [ 204.        ,   64.        ],
       [ 209.16666667,   63.66666667],
       [  38.        ,   64.        ],
       [  41.5       ,   64.        ],
       [  69.5       ,   64.        ],
       [  40.        ,   65.        ],
       [  43.        ,   65.        ],
       [  68.        ,   65.        ],
       [  71.        ,   65.        ],
       [ 206.        ,   65.        ],
       [  37.28571429,   68.71428571],
       [  39.        ,   67.        ],
       [  42.6       ,   68.9       ],
       [  68.57142857,   67.42857143],
       [  72.        ,   66.5       ],
       [ 205.        ,   66.        ],
       [ 202.        ,   70.        ],
       [ 204.75      ,   67.75      ],
       [ 207.5       ,   67.        ],
       [  47.        ,   70.        ],
       [ 209.5       ,   68.        ],
       [  66.82352941,   74.41176471],
       [ 207.        ,   69.        ],
       [ 211.        ,   69.5       ],
       [  69.5       ,   70.        ],
       [ 205.33333333,   70.33333333],
       [ 208.66666667,   70.33333333],
       [  68.        ,   71.        ],
       [  71.        ,   71.        ],
       [ 212.        ,   72.        ],
       [  41.85714286,   72.14285714],
       [  67.        ,   73.        ],
       [  70.625     ,   74.125     ],
       [ 204.        ,   72.        ],
       [ 210.        ,   72.5       ],
       [  41.94736842,   75.73684211],
       [ 205.        ,   73.5       ],
       [  43.        ,   74.        ],
       [ 207.        ,   76.06666667],
       [ 209.        ,   74.        ],
       [ 207.        ,   75.        ],
       [  73.        ,   76.        ],
       [   3.        ,   81.        ],
       [  81.        ,   81.        ],
       [ 168.        ,   81.        ],
       [ 246.        ,   81.        ],
       [  42.        ,   82.        ],
       [  69.        ,   82.        ],
       [  97.        ,   82.        ],
       [ 152.        ,   82.        ],
       [ 207.        ,   82.        ],
       [ 234.        ,   82.        ],
       [  14.56650246,  111.25123153],
       [  39.84713376,  104.80254777],
       [  65.10596026,  111.50993377],
       [  97.31840796,  110.99004975],
       [ 133.41176471,  106.75490196],
       [ 193.51231527,   97.56157635],
       [ 234.5       ,   97.5       ],
       [  82.        ,   97.5       ],
       [  14.5       ,   90.        ],
       [ 125.91666667,   90.91666667],
       [ 235.35714286,   93.14285714],
       [  11.        ,   91.        ],
       [  18.        ,   91.        ],
       [ 121.33333333,   91.33333333],
       [  10.        ,   93.5       ],
       [  14.5       ,   92.8       ],
       [  19.        ,   93.5       ],
       [ 120.        ,   97.5       ],
       [ 123.        ,   93.        ],
       [ 236.        ,   94.        ],
       [ 124.14285714,   94.85714286],
       [  14.5       ,   95.66666667],
       [  11.        ,   96.5       ],
       [  18.        ,   96.5       ],
       [ 128.        ,   96.        ],
       [ 233.2       ,   96.2       ],
       [ 124.5       ,   98.57142857],
       [ 128.36363636,  101.36363636],
       [  10.        ,  100.5       ],
       [  14.5       ,   99.875     ],
       [  19.        ,  100.5       ],
       [ 234.8       ,   98.2       ],
       [ 237.        ,  100.5       ],
       [ 123.        ,  102.        ],
       [ 126.        ,  102.        ],
       [ 230.4       ,  103.        ],
       [ 235.5       ,  102.        ],
       [ 238.        ,  102.5       ],
       [  14.5       ,  103.        ],
       [ 121.75      ,  103.75      ],
       [ 124.5       ,  103.        ],
       [ 233.        ,  103.        ],
       [  11.5       ,  104.        ],
       [  17.5       ,  104.        ],
       [ 236.5       ,  104.        ],
       [  14.5       ,  105.        ],
       [ 124.5       ,  105.        ],
       [ 233.5       ,  105.        ],
       [  82.        ,  111.        ],
       [ 151.5       ,  124.5       ],
       [ 206.86065574,  137.91188525],
       [  82.        ,  124.5       ],
       [  55.        ,  125.        ],
       [ 167.        ,  125.        ],
       [ 247.        ,  125.        ],
       [  97.        ,  117.        ],
       [ 151.        ,  117.        ],
       [  14.875     ,  119.        ],
       [  93.6       ,  118.6       ],
       [  99.5       ,  118.        ],
       [ 148.5       ,  118.        ],
       [ 155.22222222,  119.77777778],
       [ 232.85      ,  121.15      ],
       [  18.18181818,  123.81818182],
       [  97.06666667,  121.2       ],
       [ 101.        ,  121.        ],
       [ 151.        ,  119.        ],
       [ 235.17241379,  128.31034483],
       [ 149.        ,  120.        ],
       [ 153.        ,  120.        ],
       [  12.        ,  121.5       ],
       [  16.        ,  123.        ],
       [  92.        ,  121.        ],
       [ 152.42857143,  122.42857143],
       [  14.        ,  122.5       ],
       [  93.        ,  122.5       ],
       [  10.        ,  125.9       ],
       [  13.        ,  124.5       ],
       [  94.        ,  124.        ],
       [ 100.        ,  124.        ],
       [ 155.        ,  124.        ],
       [  92.44444444,  128.        ],
       [  97.        ,  125.        ],
       [ 101.66666667,  126.83333333],
       [ 151.        ,  125.        ],
       [ 156.        ,  127.5       ],
       [  13.5       ,  126.66666667],
       [  95.        ,  126.        ],
       [  99.        ,  126.5       ],
       [ 151.69230769,  128.84615385],
       [  94.        ,  127.5       ],
       [ 100.        ,  128.        ],
       [  13.5       ,  129.        ],
       [  18.        ,  129.5       ],
       [  96.2       ,  129.8       ],
       [  99.        ,  129.        ],
       [  16.33333333,  130.66666667],
       [  98.1       ,  131.6       ],
       [ 155.        ,  131.        ],
       [ 151.        ,  132.        ],
       [  42.96      ,  137.96      ],
       [ 109.        ,  137.        ],
       [ 138.00502513,  151.81909548],
       [ 207.        ,  139.        ],
       [  14.51020408,  151.98979592],
       [  51.96551724,  151.92528736],
       [  97.5       ,  152.        ],
       [  82.        ,  151.5       ],
       [ 167.        ,  151.5       ],
       [ 247.        ,  152.        ],
       [  13.85      ,  146.15      ],
       [ 124.60869565,  146.82608696],
       [ 234.8125    ,  145.9375    ],
       [  19.        ,  147.        ],
       [  18.        ,  149.        ],
       [ 123.66666667,  155.33333333],
       [ 230.        ,  152.5       ],
       [ 233.        ,  148.        ],
       [ 234.14285714,  149.85714286],
       [  15.        ,  151.        ],
       [  17.        ,  151.5       ],
       [ 238.        ,  151.        ],
       [ 234.5       ,  153.57142857],
       [ 238.36363636,  156.36363636],
       [  14.        ,  153.5       ],
       [  16.        ,  154.        ],
       [ 127.        ,  153.        ],
       [ 126.        ,  154.        ],
       [  13.        ,  156.        ],
       [ 125.        ,  155.        ],
       [  15.        ,  156.5       ],
       [ 125.2       ,  156.8       ],
       [ 233.        ,  157.        ],
       [ 236.        ,  157.        ],
       [  12.75      ,  158.75      ],
       [ 231.75      ,  158.75      ],
       [ 234.5       ,  158.        ],
       [ 234.5       ,  160.        ],
       [  19.        ,  180.33333333],
       [  41.5       ,  167.        ],
       [  65.        ,  180.33333333],
       [  97.        ,  167.        ],
       [ 124.62376238,  180.12871287],
       [ 151.5       ,  167.        ],
       [ 184.11842105,  180.15789474],
       [ 207.        ,  167.        ],
       [ 234.        ,  167.        ],
       [   3.        ,  168.        ],
       [  35.        ,  186.5       ],
       [  54.92592593,  180.        ],
       [  81.        ,  168.        ],
       [  90.63265306,  186.36734694],
       [ 109.96      ,  179.04      ],
       [ 151.51282051,  184.01282051],
       [ 168.        ,  168.        ],
       [ 215.3046875 ,  184.40625   ],
       [ 246.        ,  168.        ],
       [   2.        ,  180.        ],
       [  82.        ,  180.        ],
       [ 167.        ,  180.        ],
       [ 247.        ,  180.        ],
       [  43.        ,  172.        ],
       [ 178.5       ,  172.        ],
       [ 207.        ,  172.        ],
       [  39.75      ,  173.25      ],
       [  45.5       ,  173.        ],
       [ 175.66666667,  174.16666667],
       [ 181.5       ,  173.        ],
       [ 203.6       ,  173.6       ],
       [ 209.5       ,  173.        ],
       [  43.        ,  174.        ],
       [ 178.5       ,  174.        ],
       [ 183.        ,  176.5       ],
       [ 206.5       ,  174.        ],
       [ 211.        ,  176.        ],
       [  38.        ,  175.5       ],
       [  41.        ,  175.        ],
       [ 180.8       ,  176.2       ],
       [ 205.        ,  175.        ],
       [ 208.75      ,  175.75      ],
       [  40.25      ,  177.25      ],
       [ 202.        ,  176.        ],
       [ 204.        ,  176.        ],
       [  37.        ,  179.5       ],
       [  42.5       ,  177.        ],
       [ 203.        ,  178.5       ],
       [ 206.2       ,  177.8       ],
       [  45.4       ,  178.6       ],
       [  42.5       ,  179.        ],
       [ 180.        ,  179.        ],
       [ 210.        ,  179.        ],
       [  40.8       ,  182.9       ],
       [  44.        ,  180.        ],
       [ 179.        ,  180.        ],
       [ 180.71428571,  181.71428571],
       [ 207.        ,  180.        ],
       [ 211.        ,  180.5       ],
       [  45.        ,  182.        ],
       [  47.        ,  182.5       ],
       [ 178.        ,  181.        ],
       [ 202.28571429,  183.71428571],
       [ 205.        ,  181.        ],
       [ 209.        ,  181.5       ],
       [ 178.58333333,  185.41666667],
       [ 204.        ,  182.5       ],
       [ 212.        ,  182.5       ],
       [  38.        ,  184.        ],
       [ 210.        ,  183.        ],
       [  44.        ,  184.        ],
       [ 206.2       ,  184.8       ],
       [ 209.        ,  184.        ],
       [ 208.36363636,  186.36363636],
       [  43.55555556,  186.55555556],
       [  39.        ,  186.        ],
       [ 109.        ,  192.        ],
       [ 194.9973545 ,  221.44444444],
       [ 234.96      ,  194.04      ],
       [  14.51      ,  207.49      ],
       [  53.45896657,  217.87537994],
       [ 107.11231884,  213.65942029],
       [ 151.43502825,  217.3220339 ],
       [ 222.        ,  195.        ],
       [  82.        ,  207.        ],
       [ 167.        ,  207.        ],
       [ 231.11904762,  223.57936508],
       [ 247.        ,  207.5       ],
       [  97.57142857,  207.85714286],
       [ 123.8       ,  200.2       ],
       [ 151.5       ,  200.        ],
       [ 235.03571429,  202.82142857],
       [ 123.23529412,  206.41176471],
       [ 147.25      ,  203.75      ],
       [ 155.        ,  201.        ],
       [ 230.        ,  203.5       ],
       [ 126.23076923,  207.76923077],
       [ 152.33333333,  204.46666667],
       [ 156.        ,  203.5       ],
       [  94.5       ,  204.        ],
       [ 149.        ,  205.        ],
       [  96.        ,  206.        ],
       [ 157.        ,  207.        ],
       [  95.        ,  207.        ],
       [ 233.        ,  207.        ],
       [ 148.75      ,  208.75      ],
       [ 236.        ,  208.        ],
       [ 153.28571429,  210.57142857],
       [ 156.        ,  210.5       ],
       [ 237.        ,  209.5       ],
       [ 239.        ,  210.        ],
       [ 151.5       ,  210.        ],
       [ 235.25      ,  211.75      ],
       [ 148.85714286,  213.        ],
       [ 230.85714286,  213.        ],
       [ 238.        ,  212.5       ],
       [ 151.        ,  213.        ],
       [ 155.        ,  213.        ],
       [ 233.        ,  213.        ],
       [ 124.5       ,  214.        ],
       [ 153.        ,  214.        ],
       [ 236.        ,  214.        ],
       [ 151.        ,  215.        ],
       [ 233.5       ,  215.        ],
       [  14.87628866,  234.12371134],
       [ 124.5       ,  234.5       ],
       [ 124.5       ,  227.        ],
       [ 206.5       ,  227.        ],
       [ 234.        ,  227.        ],
       [ 121.5       ,  228.        ],
       [ 128.58823529,  233.35294118],
       [ 204.66666667,  228.83333333],
       [ 210.75      ,  228.75      ],
       [ 231.5       ,  228.        ],
       [ 236.5       ,  228.        ],
       [ 120.        ,  231.        ],
       [ 124.5       ,  229.        ],
       [ 230.        ,  229.5       ],
       [ 234.        ,  229.88888889],
       [ 238.        ,  229.5       ],
       [ 123.6       ,  231.9       ],
       [ 126.        ,  230.        ],
       [ 208.        ,  231.        ],
       [ 127.        ,  231.        ],
       [ 210.        ,  232.        ],
       [ 229.        ,  232.        ],
       [ 239.        ,  234.5       ],
       [ 231.        ,  232.        ],
       [ 235.625     ,  234.125     ],
       [ 207.        ,  234.        ],
       [ 232.        ,  233.5       ],
       [ 121.        ,  234.        ],
       [ 209.        ,  234.5       ],
       [ 230.25      ,  235.25      ],
       [ 120.125     ,  238.375     ],
       [ 125.25      ,  235.25      ],
       [ 124.21428571,  238.42857143],
       [ 206.        ,  236.5       ],
       [ 208.        ,  237.        ],
       [ 234.625     ,  237.625     ],
       [ 205.        ,  239.5       ],
       [ 207.        ,  240.        ],
       [ 238.        ,  239.5       ],
       [ 231.66666667,  240.16666667],
       [ 127.5       ,  241.        ],
       [ 234.25      ,  241.75      ],
       [ 124.        ,  242.        ],
       [   3.        ,  246.        ],
       [  81.        ,  246.        ],
       [ 168.        ,  246.        ],
       [ 246.        ,  246.        ],
       [  41.5       ,  247.        ],
       [  69.        ,  247.        ],
       [  97.        ,  247.        ],
       [ 152.        ,  247.        ],
       [ 234.        ,  247.        ]])
>>> cent.shape
(491, 2)
>>> stat.shape
(491, 5)
>>> out = cv2.connectedComponentsWithStats(edges,connectivity=8)
>>> cent = out[3]
>>> cent.shape
(80, 2)
>>> cent
array([[ 124.51709768,  124.46313105],
       [  14.75333333,   42.25333333],
       [  42.        ,   15.        ],
       [  69.30150754,   29.01507538],
       [ 124.51655629,   15.17549669],
       [ 200.36567164,   35.86318408],
       [ 220.21393035,   15.07462687],
       [  42.43103448,   15.0862069 ],
       [  14.45901639,   15.2295082 ],
       [ 124.73809524,   13.19047619],
       [  42.        ,   55.73529412],
       [  97.5       ,   55.735     ],
       [ 133.61258278,   51.35430464],
       [  14.25352113,   42.42253521],
       [  96.83333333,   41.61111111],
       [ 124.73469388,   42.81632653],
       [ 151.85714286,   42.11111111],
       [ 124.1875    ,   39.9375    ],
       [  97.        ,   49.        ],
       [  69.22916667,   69.23958333],
       [ 151.5       ,   69.23469388],
       [ 206.85423729,   69.36271186],
       [  42.01449275,   69.94202899],
       [  69.4       ,   68.93333333],
       [ 206.68115942,   69.97101449],
       [  69.6       ,   72.93333333],
       [  14.56650246,  111.25123153],
       [  41.92682927,  111.11219512],
       [  69.245     ,  111.385     ],
       [  97.37623762,  111.11881188],
       [ 133.41176471,  106.75490196],
       [ 193.51231527,   97.56157635],
       [ 234.5       ,   97.5       ],
       [  14.5       ,   97.45      ],
       [ 124.4057971 ,   97.43478261],
       [ 234.70491803,   97.1147541 ],
       [  14.5       ,   93.875     ],
       [  14.5       ,  100.22222222],
       [ 151.5       ,  124.5       ],
       [ 206.95348837,  138.00166113],
       [  96.88      ,  124.81333333],
       [ 152.97560976,  123.48780488],
       [  14.49090909,  124.58181818],
       [ 234.2244898 ,  125.3877551 ],
       [ 151.5625    ,  128.125     ],
       [ 138.00502513,  151.81909548],
       [  14.51020408,  151.98979592],
       [  55.33673469,  151.87755102],
       [  97.5       ,  152.        ],
       [  14.53488372,  150.18604651],
       [ 124.29310345,  152.01724138],
       [ 234.37142857,  152.32857143],
       [  14.88888889,  180.13131313],
       [  41.87128713,  180.12871287],
       [  69.11111111,  180.13131313],
       [  97.24489796,  180.01020408],
       [ 124.62376238,  180.12871287],
       [ 151.51      ,  180.27      ],
       [ 206.81543624,  179.84563758],
       [  41.95454545,  180.        ],
       [ 179.28813559,  180.15254237],
       [ 206.77464789,  179.88732394],
       [ 193.32835821,  220.67910448],
       [ 233.865     ,  220.62      ],
       [  14.51      ,  207.49      ],
       [  55.345     ,  220.7425    ],
       [ 106.33444816,  216.22408027],
       [ 151.5       ,  220.735     ],
       [  97.30645161,  207.56451613],
       [ 124.42857143,  206.02857143],
       [ 151.73076923,  207.90384615],
       [ 234.28125   ,  206.875     ],
       [ 151.77777778,  204.55555556],
       [ 124.5       ,  214.        ],
       [  14.75510204,  234.24489796],
       [ 124.5       ,  234.5       ],
       [ 124.58064516,  235.4516129 ],
       [ 207.17948718,  232.61538462],
       [ 234.24285714,  234.57142857],
       [ 124.14285714,  231.28571429]])
>>> lab = out[1]
>>> stat = out[2]
>>> stat
array([[    0,     0,   250,   250, 52551],
       [    2,     2,    26,    81,   300],
       [   29,     2,    27,    27,   100],
       [   57,     2,    26,    54,   199],
       [   85,     2,    80,    27,   302],
       [  167,     2,    81,    54,   402],
       [  194,     2,    54,    27,   201],
       [   37,     7,    11,    16,    58],
       [   10,     8,    10,    15,    61],
       [  120,     8,    10,    15,    42],
       [   29,    30,    27,    53,   204],
       [   85,    30,    26,    53,   200],
       [  112,    30,    53,    53,   302],
       [   10,    35,    10,    16,    71],
       [   93,    35,     9,    15,    36],
       [  120,    35,    10,    16,    49],
       [  147,    35,    10,    16,    63],
       [  122,    37,     6,     7,    16],
       [   96,    49,     3,     1,     3],
       [   57,    57,    26,    26,    96],
       [  139,    57,    26,    26,    98],
       [  167,    57,    81,    26,   295],
       [   37,    62,    11,    16,    69],
       [   65,    62,    10,    16,    60],
       [  202,    62,    11,    16,    69],
       [   67,    70,     6,     6,    15],
       [    2,    85,    26,    54,   203],
       [   29,    85,    27,    54,   205],
       [   57,    85,    26,    54,   200],
       [   85,    85,    26,    54,   202],
       [  112,    85,    53,    54,   306],
       [  167,    85,    54,    26,   203],
       [  222,    85,    26,    26,   100],
       [   10,    90,    10,    16,    40],
       [  120,    90,    10,    16,    69],
       [  230,    90,    10,    16,    61],
       [   12,    92,     6,     5,    16],
       [   12,    98,     6,     6,    18],
       [  139,   112,    26,    26,   100],
       [  167,   112,    81,    53,   602],
       [   92,   117,    11,    16,    75],
       [  148,   117,     9,    16,    41],
       [    9,   118,    11,    14,    55],
       [  230,   118,    10,    15,    49],
       [  147,   125,     8,     6,    16],
       [  112,   139,    53,    26,   199],
       [    2,   140,    26,    25,    98],
       [   29,   140,    54,    25,   196],
       [   85,   140,    26,    25,    98],
       [   10,   145,    10,    15,    43],
       [  120,   145,     9,    15,    58],
       [  230,   145,    10,    16,    70],
       [    2,   167,    26,    27,    99],
       [   29,   167,    27,    27,   101],
       [   57,   167,    26,    27,    99],
       [   85,   167,    26,    27,    98],
       [  112,   167,    26,    27,   101],
       [  139,   167,    26,    27,   100],
       [  167,   167,    81,    27,   298],
       [   37,   172,    11,    16,    66],
       [  175,   172,     9,    16,    59],
       [  202,   172,    11,    16,    71],
       [  167,   194,    53,    54,   402],
       [  221,   194,    27,    54,   200],
       [    2,   195,    26,    26,   100],
       [   29,   195,    54,    53,   400],
       [   85,   195,    53,    53,   299],
       [  139,   195,    26,    53,   200],
       [   92,   200,    11,    15,    62],
       [  121,   200,     8,    13,    35],
       [  147,   200,    11,    16,    52],
       [  230,   200,    10,    16,    64],
       [  149,   202,     6,     6,    18],
       [  121,   214,     8,     1,     8],
       [    2,   222,    26,    26,    98],
       [  112,   222,    26,    26,   100],
       [  120,   227,    10,    16,    62],
       [  203,   227,     9,    15,    39],
       [  229,   227,    11,    16,    70],
       [  122,   229,     6,     5,    14]], dtype=int32)
>>> cv2.imshow('hjb',edges)
>>> cv2.rectangle(egdes,(29,167),(29+27,167+27),(0,255,0),2)
Traceback (most recent call last):
  File "<pyshell#289>", line 1, in <module>
    cv2.rectangle(egdes,(29,167),(29+27,167+27),(0,255,0),2)
NameError: name 'egdes' is not defined
>>> cv2.rectangle(edges,(29,167),(29+27,167+27),(0,255,0),2)
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> cv2.imshow('hjb',edges)
>>> cv2.imshow('jnj',im)
>>> cv2.rectangle(im,(29,167),(29+27,167+27),(0,255,0),2)
array([[[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       ..., 
       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255]],

       [[  0,   0, 255],
        [  0,   0, 255],
        [  0,   0, 255],
        ..., 
        [  0,   0, 255],
        [  0,   0, 255],
        [  0,   0,   0]]], dtype=uint8)
>>> cv2.imshow('jnj',im)
>>> im = cv2.rectangle(im,(2,2),(26+2,2+81),(0,255,0),2)
>>> cv2.imshow('jnj',im)
>>> im = cv2.rectangle(im,(67,70),(67+6,70+6),(0,255,0),2)
>>> cv2.imshow('jnj',im)
>>> I = 1 - imB
Traceback (most recent call last):
  File "<pyshell#299>", line 1, in <module>
    I = 1 - imB
NameError: name 'imB' is not defined
>>> ret,imB = binarize(img,cv2.THRESH_OTSU)
>>> I = 1 - imB
>>> cv2.imshow('jnk',I)
>>> cv2.imshow('jnk',imB)
>>> I = 255*(1 - imB)
>>> cv2.imshow('jnk',I)
>>> out = cv2.connectedComponentsWithStats(I,connectivity=8)
>>> stati = out[2]
>>> centi = out[3]
>>> stati.shape
(32, 5)
>>> stati
array([[    3,     3,   244,   244, 50370],
       [    0,     0,   250,   250, 10387],
       [   10,     8,     9,    15,    61],
       [   38,     8,     9,    15,    56],
       [  120,     8,     9,    14,    43],
       [   10,    36,    10,    14,    66],
       [   93,    36,     9,    14,    47],
       [  120,    36,    10,    14,    69],
       [  148,    36,     9,    14,    52],
       [   38,    63,     9,    15,    66],
       [   65,    63,    10,    15,    70],
       [  203,    63,     9,    15,    65],
       [  120,    90,    10,    15,    66],
       [  230,    90,     9,    15,    52],
       [   10,    91,    10,    14,    72],
       [   10,   118,    10,    14,    59],
       [   93,   118,     9,    15,    70],
       [  148,   118,     9,    15,    52],
       [  231,   118,     8,    14,    39],
       [  120,   145,     9,    15,    53],
       [  230,   145,    10,    15,    65],
       [   10,   146,     9,    14,    34],
       [   38,   173,     9,    14,    64],
       [  175,   173,     9,    14,    53],
       [  202,   173,    10,    14,    70],
       [  147,   200,    10,    15,    67],
       [   92,   201,    11,    14,    55],
       [  121,   201,     8,    14,    46],
       [  230,   201,     9,    14,    52],
       [  120,   228,    10,    14,    72],
       [  203,   228,     9,    14,    43],
       [  230,   228,    10,    14,    64]], dtype=int32)
>>> sum(stati[:,2:])/30
array([   25.83333333,    30.86666667,  2083.33333333])
>>> stati[:,2:]
array([[  244,   244, 50370],
       [  250,   250, 10387],
       [    9,    15,    61],
       [    9,    15,    56],
       [    9,    14,    43],
       [   10,    14,    66],
       [    9,    14,    47],
       [   10,    14,    69],
       [    9,    14,    52],
       [    9,    15,    66],
       [   10,    15,    70],
       [    9,    15,    65],
       [   10,    15,    66],
       [    9,    15,    52],
       [   10,    14,    72],
       [   10,    14,    59],
       [    9,    15,    70],
       [    9,    15,    52],
       [    8,    14,    39],
       [    9,    15,    53],
       [   10,    15,    65],
       [    9,    14,    34],
       [    9,    14,    64],
       [    9,    14,    53],
       [   10,    14,    70],
       [   10,    15,    67],
       [   11,    14,    55],
       [    8,    14,    46],
       [    9,    14,    52],
       [   10,    14,    72],
       [    9,    14,    43],
       [   10,    14,    64]], dtype=int32)
>>> sum(stati[:,2][2:])/30
9.3666666666666671
>>> stat.shape
(80, 5)
>>> s = sorted(stat,key=lambda stat:stat[2])
>>> s
[array([96, 49,  3,  1,  3], dtype=int32), array([122,  37,   6,   7,  16], dtype=int32), array([67, 70,  6,  6, 15], dtype=int32), array([12, 92,  6,  5, 16], dtype=int32), array([12, 98,  6,  6, 18], dtype=int32), array([149, 202,   6,   6,  18], dtype=int32), array([122, 229,   6,   5,  14], dtype=int32), array([147, 125,   8,   6,  16], dtype=int32), array([121, 200,   8,  13,  35], dtype=int32), array([121, 214,   8,   1,   8], dtype=int32), array([93, 35,  9, 15, 36], dtype=int32), array([148, 117,   9,  16,  41], dtype=int32), array([120, 145,   9,  15,  58], dtype=int32), array([175, 172,   9,  16,  59], dtype=int32), array([203, 227,   9,  15,  39], dtype=int32), array([10,  8, 10, 15, 61], dtype=int32), array([120,   8,  10,  15,  42], dtype=int32), array([10, 35, 10, 16, 71], dtype=int32), array([120,  35,  10,  16,  49], dtype=int32), array([147,  35,  10,  16,  63], dtype=int32), array([65, 62, 10, 16, 60], dtype=int32), array([10, 90, 10, 16, 40], dtype=int32), array([120,  90,  10,  16,  69], dtype=int32), array([230,  90,  10,  16,  61], dtype=int32), array([230, 118,  10,  15,  49], dtype=int32), array([ 10, 145,  10,  15,  43], dtype=int32), array([230, 145,  10,  16,  70], dtype=int32), array([230, 200,  10,  16,  64], dtype=int32), array([120, 227,  10,  16,  62], dtype=int32), array([37,  7, 11, 16, 58], dtype=int32), array([37, 62, 11, 16, 69], dtype=int32), array([202,  62,  11,  16,  69], dtype=int32), array([ 92, 117,  11,  16,  75], dtype=int32), array([  9, 118,  11,  14,  55], dtype=int32), array([ 37, 172,  11,  16,  66], dtype=int32), array([202, 172,  11,  16,  71], dtype=int32), array([ 92, 200,  11,  15,  62], dtype=int32), array([147, 200,  11,  16,  52], dtype=int32), array([229, 227,  11,  16,  70], dtype=int32), array([  2,   2,  26,  81, 300], dtype=int32), array([ 57,   2,  26,  54, 199], dtype=int32), array([ 85,  30,  26,  53, 200], dtype=int32), array([57, 57, 26, 26, 96], dtype=int32), array([139,  57,  26,  26,  98], dtype=int32), array([  2,  85,  26,  54, 203], dtype=int32), array([ 57,  85,  26,  54, 200], dtype=int32), array([ 85,  85,  26,  54, 202], dtype=int32), array([222,  85,  26,  26, 100], dtype=int32), array([139, 112,  26,  26, 100], dtype=int32), array([  2, 140,  26,  25,  98], dtype=int32), array([ 85, 140,  26,  25,  98], dtype=int32), array([  2, 167,  26,  27,  99], dtype=int32), array([ 57, 167,  26,  27,  99], dtype=int32), array([ 85, 167,  26,  27,  98], dtype=int32), array([112, 167,  26,  27, 101], dtype=int32), array([139, 167,  26,  27, 100], dtype=int32), array([  2, 195,  26,  26, 100], dtype=int32), array([139, 195,  26,  53, 200], dtype=int32), array([  2, 222,  26,  26,  98], dtype=int32), array([112, 222,  26,  26, 100], dtype=int32), array([ 29,   2,  27,  27, 100], dtype=int32), array([ 29,  30,  27,  53, 204], dtype=int32), array([ 29,  85,  27,  54, 205], dtype=int32), array([ 29, 167,  27,  27, 101], dtype=int32), array([221, 194,  27,  54, 200], dtype=int32), array([112,  30,  53,  53, 302], dtype=int32), array([112,  85,  53,  54, 306], dtype=int32), array([112, 139,  53,  26, 199], dtype=int32), array([167, 194,  53,  54, 402], dtype=int32), array([ 85, 195,  53,  53, 299], dtype=int32), array([194,   2,  54,  27, 201], dtype=int32), array([167,  85,  54,  26, 203], dtype=int32), array([ 29, 140,  54,  25, 196], dtype=int32), array([ 29, 195,  54,  53, 400], dtype=int32), array([ 85,   2,  80,  27, 302], dtype=int32), array([167,   2,  81,  54, 402], dtype=int32), array([167,  57,  81,  26, 295], dtype=int32), array([167, 112,  81,  53, 602], dtype=int32), array([167, 167,  81,  27, 298], dtype=int32), array([    0,     0,   250,   250, 52551], dtype=int32)]
>>> s = sorted(stat,key=lambda row:row[3])
>>> s
[array([96, 49,  3,  1,  3], dtype=int32), array([121, 214,   8,   1,   8], dtype=int32), array([12, 92,  6,  5, 16], dtype=int32), array([122, 229,   6,   5,  14], dtype=int32), array([67, 70,  6,  6, 15], dtype=int32), array([12, 98,  6,  6, 18], dtype=int32), array([147, 125,   8,   6,  16], dtype=int32), array([149, 202,   6,   6,  18], dtype=int32), array([122,  37,   6,   7,  16], dtype=int32), array([121, 200,   8,  13,  35], dtype=int32), array([  9, 118,  11,  14,  55], dtype=int32), array([10,  8, 10, 15, 61], dtype=int32), array([120,   8,  10,  15,  42], dtype=int32), array([93, 35,  9, 15, 36], dtype=int32), array([230, 118,  10,  15,  49], dtype=int32), array([ 10, 145,  10,  15,  43], dtype=int32), array([120, 145,   9,  15,  58], dtype=int32), array([ 92, 200,  11,  15,  62], dtype=int32), array([203, 227,   9,  15,  39], dtype=int32), array([37,  7, 11, 16, 58], dtype=int32), array([10, 35, 10, 16, 71], dtype=int32), array([120,  35,  10,  16,  49], dtype=int32), array([147,  35,  10,  16,  63], dtype=int32), array([37, 62, 11, 16, 69], dtype=int32), array([65, 62, 10, 16, 60], dtype=int32), array([202,  62,  11,  16,  69], dtype=int32), array([10, 90, 10, 16, 40], dtype=int32), array([120,  90,  10,  16,  69], dtype=int32), array([230,  90,  10,  16,  61], dtype=int32), array([ 92, 117,  11,  16,  75], dtype=int32), array([148, 117,   9,  16,  41], dtype=int32), array([230, 145,  10,  16,  70], dtype=int32), array([ 37, 172,  11,  16,  66], dtype=int32), array([175, 172,   9,  16,  59], dtype=int32), array([202, 172,  11,  16,  71], dtype=int32), array([147, 200,  11,  16,  52], dtype=int32), array([230, 200,  10,  16,  64], dtype=int32), array([120, 227,  10,  16,  62], dtype=int32), array([229, 227,  11,  16,  70], dtype=int32), array([  2, 140,  26,  25,  98], dtype=int32), array([ 29, 140,  54,  25, 196], dtype=int32), array([ 85, 140,  26,  25,  98], dtype=int32), array([57, 57, 26, 26, 96], dtype=int32), array([139,  57,  26,  26,  98], dtype=int32), array([167,  57,  81,  26, 295], dtype=int32), array([167,  85,  54,  26, 203], dtype=int32), array([222,  85,  26,  26, 100], dtype=int32), array([139, 112,  26,  26, 100], dtype=int32), array([112, 139,  53,  26, 199], dtype=int32), array([  2, 195,  26,  26, 100], dtype=int32), array([  2, 222,  26,  26,  98], dtype=int32), array([112, 222,  26,  26, 100], dtype=int32), array([ 29,   2,  27,  27, 100], dtype=int32), array([ 85,   2,  80,  27, 302], dtype=int32), array([194,   2,  54,  27, 201], dtype=int32), array([  2, 167,  26,  27,  99], dtype=int32), array([ 29, 167,  27,  27, 101], dtype=int32), array([ 57, 167,  26,  27,  99], dtype=int32), array([ 85, 167,  26,  27,  98], dtype=int32), array([112, 167,  26,  27, 101], dtype=int32), array([139, 167,  26,  27, 100], dtype=int32), array([167, 167,  81,  27, 298], dtype=int32), array([ 29,  30,  27,  53, 204], dtype=int32), array([ 85,  30,  26,  53, 200], dtype=int32), array([112,  30,  53,  53, 302], dtype=int32), array([167, 112,  81,  53, 602], dtype=int32), array([ 29, 195,  54,  53, 400], dtype=int32), array([ 85, 195,  53,  53, 299], dtype=int32), array([139, 195,  26,  53, 200], dtype=int32), array([ 57,   2,  26,  54, 199], dtype=int32), array([167,   2,  81,  54, 402], dtype=int32), array([  2,  85,  26,  54, 203], dtype=int32), array([ 29,  85,  27,  54, 205], dtype=int32), array([ 57,  85,  26,  54, 200], dtype=int32), array([ 85,  85,  26,  54, 202], dtype=int32), array([112,  85,  53,  54, 306], dtype=int32), array([167, 194,  53,  54, 402], dtype=int32), array([221, 194,  27,  54, 200], dtype=int32), array([  2,   2,  26,  81, 300], dtype=int32), array([    0,     0,   250,   250, 52551], dtype=int32)]
>>> s.shape
Traceback (most recent call last):
  File "<pyshell#319>", line 1, in <module>
    s.shape
AttributeError: 'list' object has no attribute 'shape'
>>> np.sort(stat,axis=2)
Traceback (most recent call last):
  File "<pyshell#320>", line 1, in <module>
    np.sort(stat,axis=2)
  File "C:\python35\lib\site-packages\numpy\core\fromnumeric.py", line 824, in sort
    a.sort(axis, kind, order)
ValueError: axis(=2) out of bounds
>>> np.sort(stat,axis=1)
array([[    0,     0,   250,   250, 52551],
       [    2,     2,    26,    81,   300],
       [    2,    27,    27,    29,   100],
       [    2,    26,    54,    57,   199],
       [    2,    27,    80,    85,   302],
       [    2,    54,    81,   167,   402],
       [    2,    27,    54,   194,   201],
       [    7,    11,    16,    37,    58],
       [    8,    10,    10,    15,    61],
       [    8,    10,    15,    42,   120],
       [   27,    29,    30,    53,   204],
       [   26,    30,    53,    85,   200],
       [   30,    53,    53,   112,   302],
       [   10,    10,    16,    35,    71],
       [    9,    15,    35,    36,    93],
       [   10,    16,    35,    49,   120],
       [   10,    16,    35,    63,   147],
       [    6,     7,    16,    37,   122],
       [    1,     3,     3,    49,    96],
       [   26,    26,    57,    57,    96],
       [   26,    26,    57,    98,   139],
       [   26,    57,    81,   167,   295],
       [   11,    16,    37,    62,    69],
       [   10,    16,    60,    62,    65],
       [   11,    16,    62,    69,   202],
       [    6,     6,    15,    67,    70],
       [    2,    26,    54,    85,   203],
       [   27,    29,    54,    85,   205],
       [   26,    54,    57,    85,   200],
       [   26,    54,    85,    85,   202],
       [   53,    54,    85,   112,   306],
       [   26,    54,    85,   167,   203],
       [   26,    26,    85,   100,   222],
       [   10,    10,    16,    40,    90],
       [   10,    16,    69,    90,   120],
       [   10,    16,    61,    90,   230],
       [    5,     6,    12,    16,    92],
       [    6,     6,    12,    18,    98],
       [   26,    26,   100,   112,   139],
       [   53,    81,   112,   167,   602],
       [   11,    16,    75,    92,   117],
       [    9,    16,    41,   117,   148],
       [    9,    11,    14,    55,   118],
       [   10,    15,    49,   118,   230],
       [    6,     8,    16,   125,   147],
       [   26,    53,   112,   139,   199],
       [    2,    25,    26,    98,   140],
       [   25,    29,    54,   140,   196],
       [   25,    26,    85,    98,   140],
       [   10,    10,    15,    43,   145],
       [    9,    15,    58,   120,   145],
       [   10,    16,    70,   145,   230],
       [    2,    26,    27,    99,   167],
       [   27,    27,    29,   101,   167],
       [   26,    27,    57,    99,   167],
       [   26,    27,    85,    98,   167],
       [   26,    27,   101,   112,   167],
       [   26,    27,   100,   139,   167],
       [   27,    81,   167,   167,   298],
       [   11,    16,    37,    66,   172],
       [    9,    16,    59,   172,   175],
       [   11,    16,    71,   172,   202],
       [   53,    54,   167,   194,   402],
       [   27,    54,   194,   200,   221],
       [    2,    26,    26,   100,   195],
       [   29,    53,    54,   195,   400],
       [   53,    53,    85,   195,   299],
       [   26,    53,   139,   195,   200],
       [   11,    15,    62,    92,   200],
       [    8,    13,    35,   121,   200],
       [   11,    16,    52,   147,   200],
       [   10,    16,    64,   200,   230],
       [    6,     6,    18,   149,   202],
       [    1,     8,     8,   121,   214],
       [    2,    26,    26,    98,   222],
       [   26,    26,   100,   112,   222],
       [   10,    16,    62,   120,   227],
       [    9,    15,    39,   203,   227],
       [   11,    16,    70,   227,   229],
       [    5,     6,    14,   122,   229]], dtype=int32)
>>> stat.dtype
dtype('int32')
>>> stat.dtype = [('x',int),('y',int),('h',int),('l',int),('a',int)]
>>> stat.dtype
dtype([('x', '<i4'), ('y', '<i4'), ('h', '<i4'), ('l', '<i4'), ('a', '<i4')])
>>> stat.sort(order=['h','l'])
>>> stat
array([[(0, 0, 250, 250, 52551)],
       [(2, 2, 26, 81, 300)],
       [(29, 2, 27, 27, 100)],
       [(57, 2, 26, 54, 199)],
       [(85, 2, 80, 27, 302)],
       [(167, 2, 81, 54, 402)],
       [(194, 2, 54, 27, 201)],
       [(37, 7, 11, 16, 58)],
       [(10, 8, 10, 15, 61)],
       [(120, 8, 10, 15, 42)],
       [(29, 30, 27, 53, 204)],
       [(85, 30, 26, 53, 200)],
       [(112, 30, 53, 53, 302)],
       [(10, 35, 10, 16, 71)],
       [(93, 35, 9, 15, 36)],
       [(120, 35, 10, 16, 49)],
       [(147, 35, 10, 16, 63)],
       [(122, 37, 6, 7, 16)],
       [(96, 49, 3, 1, 3)],
       [(57, 57, 26, 26, 96)],
       [(139, 57, 26, 26, 98)],
       [(167, 57, 81, 26, 295)],
       [(37, 62, 11, 16, 69)],
       [(65, 62, 10, 16, 60)],
       [(202, 62, 11, 16, 69)],
       [(67, 70, 6, 6, 15)],
       [(2, 85, 26, 54, 203)],
       [(29, 85, 27, 54, 205)],
       [(57, 85, 26, 54, 200)],
       [(85, 85, 26, 54, 202)],
       [(112, 85, 53, 54, 306)],
       [(167, 85, 54, 26, 203)],
       [(222, 85, 26, 26, 100)],
       [(10, 90, 10, 16, 40)],
       [(120, 90, 10, 16, 69)],
       [(230, 90, 10, 16, 61)],
       [(12, 92, 6, 5, 16)],
       [(12, 98, 6, 6, 18)],
       [(139, 112, 26, 26, 100)],
       [(167, 112, 81, 53, 602)],
       [(92, 117, 11, 16, 75)],
       [(148, 117, 9, 16, 41)],
       [(9, 118, 11, 14, 55)],
       [(230, 118, 10, 15, 49)],
       [(147, 125, 8, 6, 16)],
       [(112, 139, 53, 26, 199)],
       [(2, 140, 26, 25, 98)],
       [(29, 140, 54, 25, 196)],
       [(85, 140, 26, 25, 98)],
       [(10, 145, 10, 15, 43)],
       [(120, 145, 9, 15, 58)],
       [(230, 145, 10, 16, 70)],
       [(2, 167, 26, 27, 99)],
       [(29, 167, 27, 27, 101)],
       [(57, 167, 26, 27, 99)],
       [(85, 167, 26, 27, 98)],
       [(112, 167, 26, 27, 101)],
       [(139, 167, 26, 27, 100)],
       [(167, 167, 81, 27, 298)],
       [(37, 172, 11, 16, 66)],
       [(175, 172, 9, 16, 59)],
       [(202, 172, 11, 16, 71)],
       [(167, 194, 53, 54, 402)],
       [(221, 194, 27, 54, 200)],
       [(2, 195, 26, 26, 100)],
       [(29, 195, 54, 53, 400)],
       [(85, 195, 53, 53, 299)],
       [(139, 195, 26, 53, 200)],
       [(92, 200, 11, 15, 62)],
       [(121, 200, 8, 13, 35)],
       [(147, 200, 11, 16, 52)],
       [(230, 200, 10, 16, 64)],
       [(149, 202, 6, 6, 18)],
       [(121, 214, 8, 1, 8)],
       [(2, 222, 26, 26, 98)],
       [(112, 222, 26, 26, 100)],
       [(120, 227, 10, 16, 62)],
       [(203, 227, 9, 15, 39)],
       [(229, 227, 11, 16, 70)],
       [(122, 229, 6, 5, 14)]], 
      dtype=[('x', '<i4'), ('y', '<i4'), ('h', '<i4'), ('l', '<i4'), ('a', '<i4')])
>>> stat.sort(axis=0,order=['h','l'])
>>> stat
array([[(96, 49, 3, 1, 3)],
       [(12, 92, 6, 5, 16)],
       [(122, 229, 6, 5, 14)],
       [(12, 98, 6, 6, 18)],
       [(67, 70, 6, 6, 15)],
       [(149, 202, 6, 6, 18)],
       [(122, 37, 6, 7, 16)],
       [(121, 214, 8, 1, 8)],
       [(147, 125, 8, 6, 16)],
       [(121, 200, 8, 13, 35)],
       [(93, 35, 9, 15, 36)],
       [(120, 145, 9, 15, 58)],
       [(203, 227, 9, 15, 39)],
       [(148, 117, 9, 16, 41)],
       [(175, 172, 9, 16, 59)],
       [(10, 8, 10, 15, 61)],
       [(10, 145, 10, 15, 43)],
       [(120, 8, 10, 15, 42)],
       [(230, 118, 10, 15, 49)],
       [(10, 35, 10, 16, 71)],
       [(10, 90, 10, 16, 40)],
       [(65, 62, 10, 16, 60)],
       [(120, 35, 10, 16, 49)],
       [(120, 90, 10, 16, 69)],
       [(120, 227, 10, 16, 62)],
       [(147, 35, 10, 16, 63)],
       [(230, 90, 10, 16, 61)],
       [(230, 145, 10, 16, 70)],
       [(230, 200, 10, 16, 64)],
       [(9, 118, 11, 14, 55)],
       [(92, 200, 11, 15, 62)],
       [(37, 7, 11, 16, 58)],
       [(37, 62, 11, 16, 69)],
       [(37, 172, 11, 16, 66)],
       [(92, 117, 11, 16, 75)],
       [(147, 200, 11, 16, 52)],
       [(202, 62, 11, 16, 69)],
       [(202, 172, 11, 16, 71)],
       [(229, 227, 11, 16, 70)],
       [(2, 140, 26, 25, 98)],
       [(85, 140, 26, 25, 98)],
       [(2, 195, 26, 26, 100)],
       [(2, 222, 26, 26, 98)],
       [(57, 57, 26, 26, 96)],
       [(112, 222, 26, 26, 100)],
       [(139, 57, 26, 26, 98)],
       [(139, 112, 26, 26, 100)],
       [(222, 85, 26, 26, 100)],
       [(2, 167, 26, 27, 99)],
       [(57, 167, 26, 27, 99)],
       [(85, 167, 26, 27, 98)],
       [(112, 167, 26, 27, 101)],
       [(139, 167, 26, 27, 100)],
       [(85, 30, 26, 53, 200)],
       [(139, 195, 26, 53, 200)],
       [(2, 85, 26, 54, 203)],
       [(57, 2, 26, 54, 199)],
       [(57, 85, 26, 54, 200)],
       [(85, 85, 26, 54, 202)],
       [(2, 2, 26, 81, 300)],
       [(29, 2, 27, 27, 100)],
       [(29, 167, 27, 27, 101)],
       [(29, 30, 27, 53, 204)],
       [(29, 85, 27, 54, 205)],
       [(221, 194, 27, 54, 200)],
       [(112, 139, 53, 26, 199)],
       [(85, 195, 53, 53, 299)],
       [(112, 30, 53, 53, 302)],
       [(112, 85, 53, 54, 306)],
       [(167, 194, 53, 54, 402)],
       [(29, 140, 54, 25, 196)],
       [(167, 85, 54, 26, 203)],
       [(194, 2, 54, 27, 201)],
       [(29, 195, 54, 53, 400)],
       [(85, 2, 80, 27, 302)],
       [(167, 57, 81, 26, 295)],
       [(167, 167, 81, 27, 298)],
       [(167, 112, 81, 53, 602)],
       [(167, 2, 81, 54, 402)],
       [(0, 0, 250, 250, 52551)]], 
      dtype=[('x', '<i4'), ('y', '<i4'), ('h', '<i4'), ('l', '<i4'), ('a', '<i4')])
>>> stati
array([[    3,     3,   244,   244, 50370],
       [    0,     0,   250,   250, 10387],
       [   10,     8,     9,    15,    61],
       [   38,     8,     9,    15,    56],
       [  120,     8,     9,    14,    43],
       [   10,    36,    10,    14,    66],
       [   93,    36,     9,    14,    47],
       [  120,    36,    10,    14,    69],
       [  148,    36,     9,    14,    52],
       [   38,    63,     9,    15,    66],
       [   65,    63,    10,    15,    70],
       [  203,    63,     9,    15,    65],
       [  120,    90,    10,    15,    66],
       [  230,    90,     9,    15,    52],
       [   10,    91,    10,    14,    72],
       [   10,   118,    10,    14,    59],
       [   93,   118,     9,    15,    70],
       [  148,   118,     9,    15,    52],
       [  231,   118,     8,    14,    39],
       [  120,   145,     9,    15,    53],
       [  230,   145,    10,    15,    65],
       [   10,   146,     9,    14,    34],
       [   38,   173,     9,    14,    64],
       [  175,   173,     9,    14,    53],
       [  202,   173,    10,    14,    70],
       [  147,   200,    10,    15,    67],
       [   92,   201,    11,    14,    55],
       [  121,   201,     8,    14,    46],
       [  230,   201,     9,    14,    52],
       [  120,   228,    10,    14,    72],
       [  203,   228,     9,    14,    43],
       [  230,   228,    10,    14,    64]], dtype=int32)
>>> out = cv2.connectedComponentsWithStats(edges,connectivity=8)
>>> stat = out[2]
>>> stat.shape
(81, 5)
>>> stati.shape
(32, 5)
>>> stat
array([[    0,     0,   250,   250, 52706],
       [    2,     2,    26,    81,   300],
       [   29,     2,    27,    27,   100],
       [   57,     2,    26,    54,   199],
       [   85,     2,    80,    27,   302],
       [  167,     2,    81,    54,   402],
       [  194,     2,    54,    27,   201],
       [   37,     7,    11,    16,    58],
       [   10,     8,    10,    15,    61],
       [  120,     8,    10,    15,    42],
       [   29,    30,    27,    53,   204],
       [   85,    30,    26,    53,   200],
       [  112,    30,    53,    53,   302],
       [   10,    35,    10,    16,    71],
       [   93,    35,     9,    15,    36],
       [  120,    35,    10,    16,    49],
       [  147,    35,    10,    16,    63],
       [  122,    37,     6,     7,    16],
       [   96,    49,     3,     1,     3],
       [   57,    57,    26,    26,    96],
       [  139,    57,    26,    26,    98],
       [  167,    57,    81,    26,   295],
       [   37,    62,    11,    16,    69],
       [   65,    62,    10,    16,    60],
       [  202,    62,    11,    16,    69],
       [   67,    70,     6,     6,    15],
       [    2,    85,    26,    54,   203],
       [   29,    85,    27,    54,   205],
       [   57,    85,    26,    54,   200],
       [   85,    85,    26,    54,   202],
       [  112,    85,    53,    54,   306],
       [  167,    85,    54,    26,   203],
       [  222,    85,    26,    26,   100],
       [   10,    90,    10,    16,    40],
       [  120,    90,    10,    16,    69],
       [  230,    90,    10,    16,    61],
       [   12,    92,     6,     5,    16],
       [   12,    98,     6,     6,    18],
       [  139,   112,    26,    26,   100],
       [  167,   112,    81,    53,   602],
       [   92,   117,    11,    16,    75],
       [  148,   117,     9,    16,    41],
       [    9,   118,    11,    14,    55],
       [  230,   118,    10,    15,    49],
       [  147,   125,     8,     6,    16],
       [  112,   139,    53,    26,   199],
       [    2,   140,    26,    25,    98],
       [   29,   140,    54,    25,   196],
       [   85,   140,    26,    25,    98],
       [   10,   145,    10,    15,    43],
       [  120,   145,     9,    15,    58],
       [  230,   145,    10,    16,    70],
       [    2,   167,    26,    27,    99],
       [   58,   167,    25,    27,    72],
       [   85,   167,    26,    27,    98],
       [  112,   167,    26,    27,   101],
       [  139,   167,    26,    27,   100],
       [  167,   167,    81,    27,   298],
       [   37,   172,    11,    16,    66],
       [  175,   172,     9,    16,    59],
       [  202,   172,    11,    16,    71],
       [   54,   192,     1,     1,     1],
       [  167,   194,    53,    54,   402],
       [  221,   194,    27,    54,   200],
       [    2,   195,    26,    26,   100],
       [   57,   195,    26,    26,    98],
       [   85,   195,    53,    53,   299],
       [  139,   195,    26,    53,   200],
       [   29,   196,    54,    52,   274],
       [   92,   200,    11,    15,    62],
       [  121,   200,     8,    13,    35],
       [  147,   200,    11,    16,    52],
       [  230,   200,    10,    16,    64],
       [  149,   202,     6,     6,    18],
       [  121,   214,     8,     1,     8],
       [    2,   222,    26,    26,    98],
       [  112,   222,    26,    26,   100],
       [  120,   227,    10,    16,    62],
       [  203,   227,     9,    15,    39],
       [  229,   227,    11,    16,    70],
       [  122,   229,     6,     5,    14]], dtype=int32)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 155, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 155, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 

Warning (from warnings module):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 152
    cv2.rectangle(im,(stat[i][0],stat[i][1]),(stat[i][0]+stat[i][2],stat[i][1]+stat[i][3]),(0,255-3*i,3*i),2)
RuntimeWarning: overflow encountered in int_scalars
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 155, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> np.random
<module 'numpy.random' from 'C:\\python35\\lib\\site-packages\\numpy\\random\\__init__.py'>
>>> np.random(9)
Traceback (most recent call last):
  File "<pyshell#336>", line 1, in <module>
    np.random(9)
TypeError: 'module' object is not callable
>>> range(55)
range(0, 55)
>>> help('randint')
No Python documentation found for 'randint'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

>>> from random import *
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 

Warning (from warnings module):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 153
    cv2.rectangle(im,(stat[i][0],stat[i][1]),(stat[i][0]+stat[i][2],stat[i][1]+stat[i][3]),\
RuntimeWarning: overflow encountered in int_scalars
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 157, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> stat.shape
(2, 5)
>>> out.shape
Traceback (most recent call last):
  File "<pyshell#341>", line 1, in <module>
    out.shape
AttributeError: 'tuple' object has no attribute 'shape'
>>> imB
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ..., 
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
>>> out = cv2.connectedComponentsWithStats(255-imB,connectivity=4)
>>> stat = out[2]
>>> stat.shape
(2, 5)
>>> imB[125]
array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], dtype=uint8)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 93, in <module>
    img = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\color.cpp:7456: error: (-215) scn == 3 || scn == 4 in function cv::ipp_cvtColor

>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 157, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> stat
array([[    3,     3,   244,   244, 50370],
       [    0,     0,   250,   250, 10387],
       [   10,     8,     9,    15,    61],
       [   38,     8,     9,    15,    56],
       [  120,     8,     9,    14,    43],
       [   10,    36,    10,    14,    66],
       [   93,    36,     9,    14,    47],
       [  120,    36,    10,    14,    69],
       [  148,    36,     9,    14,    52],
       [   38,    63,     9,    15,    66],
       [   65,    63,    10,    15,    70],
       [  203,    63,     9,    15,    65],
       [  120,    90,    10,    15,    66],
       [  230,    90,     9,    15,    52],
       [   10,    91,    10,    14,    72],
       [   10,   118,    10,    14,    59],
       [   93,   118,     9,    15,    70],
       [  148,   118,     9,    15,    52],
       [  231,   118,     8,    14,    39],
       [  120,   145,     9,    15,    53],
       [  230,   145,    10,    15,    65],
       [   10,   146,     9,    14,    34],
       [   38,   173,     9,    14,    64],
       [  175,   173,     9,    14,    53],
       [  202,   173,    10,    14,    70],
       [  147,   200,    10,    15,    67],
       [   92,   201,    11,    14,    55],
       [  121,   201,     8,    14,    46],
       [  230,   201,     9,    14,    52],
       [  120,   228,    10,    14,    72],
       [  203,   228,     9,    14,    43],
       [  230,   228,    10,    14,    64]], dtype=int32)
>>> cent = out[3]
>>> cent.shape
(32, 2)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 157, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 157, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> stat
array([[    0,     0,   250,   250, 12130],
       [    3,     3,    25,    25,   564],
       [   29,     3,    26,    25,   594],
       [   57,     3,    25,    25,   625],
       [   85,     3,    25,    25,   625],
       [  112,     3,    26,    25,   607],
       [  139,     3,    26,    25,   650],
       [  168,     3,    25,    25,   625],
       [  194,     3,    26,    25,   650],
       [  222,     3,    25,    25,   625],
       [    3,    30,    25,    26,   557],
       [   30,    30,    25,    26,   650],
       [   57,    30,    25,    26,   650],
       [   85,    30,    25,    26,   603],
       [  112,    30,    26,    26,   580],
       [  139,    30,    26,    26,   624],
       [  168,    30,    25,    26,   650],
       [  194,    30,    26,    26,   676],
       [  222,    30,    25,    26,   650],
       [  122,    37,     5,     6,    27],
       [   13,    42,     5,     6,    27],
       [    3,    57,    25,    25,   625],
       [   30,    57,    25,    25,   532],
       [   57,    57,    25,    25,   512],
       [   85,    57,    25,    25,   624],
       [  112,    57,    26,    25,   650],
       [  139,    58,    26,    24,   624],
       [  168,    58,    25,    24,   600],
       [  194,    58,    26,    24,   532],
       [  222,    58,    25,    24,   600],
       [   40,    65,     5,     6,    27],
       [   67,    65,     5,     4,    17],
       [  205,    70,     5,     6,    27],
       [   67,    71,     6,     5,    26],
       [    3,    85,    25,    26,   538],
       [   29,    85,    26,    26,   674],
       [   57,    85,    25,    26,   650],
       [   85,    85,    25,    26,   648],
       [  112,    85,    26,    26,   583],
       [  139,    85,    26,    26,   675],
       [  168,    85,    25,    26,   649],
       [  194,    85,    26,    26,   676],
       [  222,    85,    25,    26,   598],
       [   13,    92,     5,     4,    17],
       [  122,    97,     6,     6,    27],
       [   12,    98,     6,     5,    23],
       [    3,   112,    25,    26,   576],
       [   30,   112,    25,    26,   650],
       [   57,   112,    25,    26,   650],
       [   85,   112,    25,    26,   538],
       [  112,   112,    26,    26,   676],
       [  139,   113,    26,    25,   598],
       [  168,   113,    25,    25,   625],
       [  194,   113,    26,    25,   650],
       [  222,   113,    25,    25,   586],
       [   95,   120,     5,     4,    18],
       [   12,   121,     4,     6,    15],
       [   95,   126,     5,     5,    23],
       [    3,   140,    25,    25,   591],
       [   30,   140,    25,    25,   625],
       [   57,   140,    25,    25,   625],
       [   85,   140,    25,    25,   624],
       [  112,   140,    26,    25,   596],
       [  139,   140,    26,    25,   648],
       [  168,   140,    25,    25,   624],
       [  194,   140,    26,    25,   649],
       [  222,   140,    25,    25,   531],
       [  232,   152,     6,     6,    29],
       [    3,   168,    25,    25,   625],
       [   29,   168,    26,    25,   559],
       [   57,   168,    25,    25,   625],
       [   85,   168,    25,    25,   625],
       [  112,   168,    26,    25,   650],
       [  139,   168,    26,    25,   650],
       [  168,   168,    25,    25,   572],
       [  194,   168,    26,    25,   538],
       [  222,   168,    25,    25,   625],
       [  205,   174,     5,     5,    19],
       [   40,   180,     5,     6,    27],
       [  205,   181,     5,     5,    23],
       [    3,   195,    25,    26,   650],
       [   29,   195,    26,    26,   675],
       [   57,   195,    25,    26,   650],
       [   85,   195,    25,    26,   574],
       [  112,   195,    26,    26,   629],
       [  139,   195,    26,    26,   579],
       [  168,   195,    25,    26,   649],
       [  194,   195,    26,    26,   675],
       [  222,   195,    25,    26,   598],
       [  149,   202,     6,     6,    28],
       [   94,   203,     5,     7,    20],
       [    3,   222,    25,    25,   625],
       [   29,   222,    26,    25,   650],
       [   57,   222,    25,    25,   625],
       [   85,   222,    25,    25,   625],
       [  112,   222,    26,    25,   536],
       [  139,   222,    26,    25,   649],
       [  168,   222,    25,    25,   625],
       [  194,   222,    26,    25,   607],
       [  222,   222,    25,    25,   532],
       [  122,   229,     5,     5,    18],
       [  232,   229,     5,     7,    29],
       [  122,   236,     6,     5,    24]], dtype=int32)
>>> imt = img[3:25+3,3:25+3]
>>> imt.shape
(25, 25)
>>> cv2.imshow('jkn',imt)
>>> plt.imshow(imt)
<matplotlib.image.AxesImage object at 0x000000F75F5F8240>
>>> plt.show()
>>> plt.imshow(imt,cmap='gray')
<matplotlib.image.AxesImage object at 0x000000F75FD77278>
>>> plt.show()
>>> cv2.imshow('jkn',im)
>>> np.delete
<function delete at 0x000000F75CD70840>
>>> help('np.delete')
No Python documentation found for 'np.delete'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

>>> eps_rho
13
>>> stat.shape
(103, 5)
>>> (1,2)<(2,3)
True
>>> (1,2)<(2,1)
True
>>> (1,2)<(-2,1)
False
>>> (1,8)<(2,1)
True
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 181, in <module>
    stat = ExtractBoxes(imB,connexity = 8,thresh=(lx/18,ly/18))
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 106, in ExtractBoxes
    output = cv2.connectedComponentsWithStats(imBinarized,connectivity)
NameError: name 'connectivity' is not defined
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 181, in <module>
    stat = ExtractBoxes(imB,connexity = 8,thresh=(lx/18,ly/18))
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 114, in ExtractBoxes
    np.delete(stat[k])
TypeError: delete() missing 1 required positional argument: 'obj'
>>> a = np.array([1,2],[3,4])
Traceback (most recent call last):
  File "<pyshell#367>", line 1, in <module>
    a = np.array([1,2],[3,4])
TypeError: data type not understood
>>> a = np.array([[1,2],[3,4]])
>>> np.delete(a,1)
array([1, 3, 4])
>>> a
array([[1, 2],
       [3, 4]])
>>> np.delete(a,(1))
array([1, 3, 4])
>>> np.delete(a,1,axis=0)
array([[1, 2]])
>>> a
array([[1, 2],
       [3, 4]])
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> stat
array([[    0,     0,   250,   250, 12130],
       [    3,     3,    25,    25,   564],
       [   29,     3,    26,    25,   594],
       [   57,     3,    25,    25,   625],
       [   85,     3,    25,    25,   625],
       [  112,     3,    26,    25,   607],
       [  139,     3,    26,    25,   650],
       [  168,     3,    25,    25,   625],
       [  194,     3,    26,    25,   650],
       [  222,     3,    25,    25,   625],
       [    3,    30,    25,    26,   557],
       [   30,    30,    25,    26,   650],
       [   57,    30,    25,    26,   650],
       [   85,    30,    25,    26,   603],
       [  112,    30,    26,    26,   580],
       [  139,    30,    26,    26,   624],
       [  168,    30,    25,    26,   650],
       [  194,    30,    26,    26,   676],
       [  222,    30,    25,    26,   650],
       [    3,    57,    25,    25,   625],
       [   30,    57,    25,    25,   532],
       [   57,    57,    25,    25,   512],
       [   85,    57,    25,    25,   624],
       [  112,    57,    26,    25,   650],
       [  139,    58,    26,    24,   624],
       [  168,    58,    25,    24,   600],
       [  194,    58,    26,    24,   532],
       [  222,    58,    25,    24,   600],
       [    3,    85,    25,    26,   538],
       [   29,    85,    26,    26,   674],
       [   57,    85,    25,    26,   650],
       [   85,    85,    25,    26,   648],
       [  112,    85,    26,    26,   583],
       [  139,    85,    26,    26,   675],
       [  168,    85,    25,    26,   649],
       [  194,    85,    26,    26,   676],
       [  222,    85,    25,    26,   598],
       [    3,   112,    25,    26,   576],
       [   30,   112,    25,    26,   650],
       [   57,   112,    25,    26,   650],
       [   85,   112,    25,    26,   538],
       [  112,   112,    26,    26,   676],
       [  139,   113,    26,    25,   598],
       [  168,   113,    25,    25,   625],
       [  194,   113,    26,    25,   650],
       [  222,   113,    25,    25,   586],
       [    3,   140,    25,    25,   591],
       [   30,   140,    25,    25,   625],
       [   57,   140,    25,    25,   625],
       [   85,   140,    25,    25,   624],
       [  112,   140,    26,    25,   596],
       [  139,   140,    26,    25,   648],
       [  168,   140,    25,    25,   624],
       [  194,   140,    26,    25,   649],
       [  222,   140,    25,    25,   531],
       [    3,   168,    25,    25,   625],
       [   29,   168,    26,    25,   559],
       [   57,   168,    25,    25,   625],
       [   85,   168,    25,    25,   625],
       [  112,   168,    26,    25,   650],
       [  139,   168,    26,    25,   650],
       [  168,   168,    25,    25,   572],
       [  194,   168,    26,    25,   538],
       [  222,   168,    25,    25,   625],
       [    3,   195,    25,    26,   650],
       [   29,   195,    26,    26,   675],
       [   57,   195,    25,    26,   650],
       [   85,   195,    25,    26,   574],
       [  112,   195,    26,    26,   629],
       [  139,   195,    26,    26,   579],
       [  168,   195,    25,    26,   649],
       [  194,   195,    26,    26,   675],
       [  222,   195,    25,    26,   598],
       [  149,   202,     6,     6,    28],
       [   94,   203,     5,     7,    20],
       [    3,   222,    25,    25,   625],
       [   29,   222,    26,    25,   650],
       [   57,   222,    25,    25,   625],
       [   85,   222,    25,    25,   625],
       [  112,   222,    26,    25,   536],
       [  139,   222,    26,    25,   649],
       [  168,   222,    25,    25,   625],
       [  194,   222,    26,    25,   607],
       [  222,   222,    25,    25,   532],
       [  122,   229,     5,     5,    18],
       [  232,   229,     5,     7,    29],
       [  122,   236,     6,     5,    24]], dtype=int32)
>>> stat.shape
(87, 5)
>>> out = cv2.connectedComponentsWithStats(imB,connectivity=8)
>>> out[2].shape
(103, 5)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> stat.shape
(82, 5)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> stat.shape
(0, 5)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> stat.shape
(81, 5)
>>> cv2.WINDOW_NORMAL
0
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 187, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 187, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> plt.subplot
<function subplot at 0x0000002CE00D7F28>
>>> help('plt.subplot')
No Python documentation found for 'plt.subplot'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 184, in <module>
    plt.subplot(990+i), plt.imshow(imBox),plt.title('box '+str(i))
  File "C:\python35\lib\site-packages\matplotlib\pyplot.py", line 1030, in subplot
    a = fig.add_subplot(*args, **kwargs)
  File "C:\python35\lib\site-packages\matplotlib\figure.py", line 1005, in add_subplot
    a = subplot_class_factory(projection_class)(self, *args, **kwargs)
  File "C:\python35\lib\site-packages\matplotlib\axes\_subplots.py", line 64, in __init__
    maxn=rows*cols, num=num))
ValueError: num must be 1 <= num <= 81, not 0
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 186, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 187, in <module>
    k = cv2.waitKey(1) & 0xFF
KeyboardInterrupt
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 184, in <module>
    plt.subplot(991+i), plt.imshow(imBox,cmap='gray'),plt.title('box '+str(i))
  File "C:\python35\lib\site-packages\matplotlib\pyplot.py", line 1030, in subplot
    a = fig.add_subplot(*args, **kwargs)
  File "C:\python35\lib\site-packages\matplotlib\figure.py", line 973, in add_subplot
    "Not {n:d}".format(n=len(args)))
ValueError: Integer subplot specification must be a three digit number.  Not 4
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 185, in <module>
    axis[i%9].imshow(imBox,cmap='gray'),axis[i%9].title('box '+str(i))
AttributeError: 'numpy.ndarray' object has no attribute 'imshow'
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 185, in <module>
    axis[i%9].plt.imshow(imBox,cmap='gray'),axis[i%9].plt.title('box '+str(i))
AttributeError: 'numpy.ndarray' object has no attribute 'plt'
>>> axis.flat
<numpy.flatiter object at 0x0000005218FF6AF0>
>>> axis.flat[0]
<matplotlib.axes._subplots.AxesSubplot object at 0x000000521882C518>
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 185, in <module>
    axis.flat[i%9].imshow(imBox,cmap='gray'),axis[i%9].flat.title('box '+str(i))
AttributeError: 'numpy.flatiter' object has no attribute 'title'
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 185, in <module>
    axis.flat[i%9].imshow(imBox,cmap='gray'),axis[i%9].flat.xlabel('box '+str(i))
AttributeError: 'numpy.flatiter' object has no attribute 'xlabel'
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 186, in <module>
    ax.set_xticks([])
NameError: name 'ax' is not defined
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 186, in <module>
    axis.set_xticks([])
AttributeError: 'numpy.ndarray' object has no attribute 'set_xticks'
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> enumerate(axis.flat)
<enumerate object at 0x0000006328AA9318>
>>> t=enumerate(axis.flat)
>>> t
<enumerate object at 0x000000632C9DE990>
>>> t[0]
Traceback (most recent call last):
  File "<pyshell#389>", line 1, in <module>
    t[0]
TypeError: 'enumerate' object is not subscriptable
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> i =2
>>> imBox = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
>>> cv2.imshow('hb',imBox)
>>> i =1
>>> imBox = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
>>> cv2.imshow('hb',imBox)
>>> i =3
>>> imBox = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
>>> cv2.imshow('hb',imBox)
>>> cv2.imshow('hb',imBox)
>>> i =4
>>> imBox = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
>>> cv2.imshow('hb',imBox)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> i =2
>>> imBox = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
>>> cv2.imshow('hb',imBox)
>>> imBox
array([[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], dtype=uint8)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 185, in <module>
    ax.imshow(imBox.reshape((28,28)),cmap='gray')
ValueError: total size of new array must be unchanged
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 185, in <module>
    ax.imshow(imBox.resize((28,28)),cmap='gray')
ValueError: resize only works on single-segment arrays
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> imBox
array([[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255],
       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255]], dtype=uint8)
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 203, in <module>
    imBox = ExtractImBoxes(stat,img)
NameError: name 'ExtractImBoxes' is not defined
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 203, in <module>
    imBox = ExtractBoxImage(stat,img)
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 135, in ExtractBoxImage
    imBox[i] = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
ValueError: setting an array element with a sequence.
>>> imBox[0]
Traceback (most recent call last):
  File "<pyshell#408>", line 1, in <module>
    imBox[0]
NameError: name 'imBox' is not defined
>>> x.f = 9
Traceback (most recent call last):
  File "<pyshell#409>", line 1, in <module>
    x.f = 9
NameError: name 'x' is not defined
>>> x = class
SyntaxError: invalid syntax
>>> x = class()
SyntaxError: invalid syntax
>>> x.self
Traceback (most recent call last):
  File "<pyshell#412>", line 1, in <module>
    x.self
NameError: name 'x' is not defined
>>> class x
SyntaxError: invalid syntax
>>> class x:
	pass

>>> x.e =1
>>> x
<class '__main__.x'>
>>> x.1=3
SyntaxError: invalid syntax
>>> x.e
1
>>> x.f = img
>>> x.f
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> f = x()
>>> f.e =3
>>> x = init()
Traceback (most recent call last):
  File "<pyshell#425>", line 1, in <module>
    x = init()
NameError: name 'init' is not defined
>>> x = __init__()
Traceback (most recent call last):
  File "<pyshell#426>", line 1, in <module>
    x = __init__()
NameError: name '__init__' is not defined
>>> f.1 = 3
SyntaxError: invalid syntax
>>> imbox = stat
>>> i = 0
>>> imbox[0] = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
Traceback (most recent call last):
  File "<pyshell#430>", line 1, in <module>
    imbox[0] = img[stat[i][1]:stat[i][1]+stat[i][3],stat[i][0]:stat[i][0]+stat[i][2]]
ValueError: could not broadcast input array from shape (25,25) into shape (5)
>>> img.flat
<numpy.flatiter object at 0x0000004EDA13D1C0>
>>> np.flatiter(img)
Traceback (most recent call last):
  File "<pyshell#432>", line 1, in <module>
    np.flatiter(img)
TypeError: cannot create 'numpy.flatiter' instances
>>> img
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> np.shape(img)
(250, 250)
>>> np.zeros(1,2)
Traceback (most recent call last):
  File "<pyshell#435>", line 1, in <module>
    np.zeros(1,2)
TypeError: data type not understood
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
Traceback (most recent call last):
  File "C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py", line 207, in <module>
    ax.imshow(imBox[i],cmap='gray')
  File "C:\python35\lib\site-packages\matplotlib\__init__.py", line 1819, in inner
    return func(ax, *args, **kwargs)
  File "C:\python35\lib\site-packages\matplotlib\axes\_axes.py", line 4922, in imshow
    im.set_data(X)
  File "C:\python35\lib\site-packages\matplotlib\image.py", line 453, in set_data
    raise TypeError("Invalid dimensions for image data")
TypeError: Invalid dimensions for image data
>>> imBox
array([[ 255.,  255.,  255., ...,  255.,  253.,  238.],
       [ 165.,  247.,  255., ...,  255.,  255.,  255.],
       [ 255.,  255.,  255., ...,  255.,  255.,  255.],
       ..., 
       [ 220.,  220.,  220., ...,  255.,  248.,  202.],
       [ 147.,  214.,  221., ...,  255.,  255.,  255.],
       [ 220.,  220.,  220., ...,  255.,  255.,  255.]])
>>> 
 RESTART: C:\Users\Mohamed\Documents\2ASicom\Sudoku-robot\Firmware\prepross.py 
>>> imBox[3]
array([ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  173.,  244.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  173.,  244.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  173.,  244.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  173.,  244.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  173.,  244.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  173.,  244.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  173.,
        244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  173.,  244.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  173.,  244.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  173.,  244.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  173.,  244.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  173.,  244.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  173.,  244.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  173.,
        244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  173.,  244.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  173.,  244.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  173.,  244.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  173.,  244.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  173.,  244.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  173.,  244.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  173.,
        244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
        255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.])
>>> imBox[3].shape
(784,)
>>> imBox[3].reshape((28,28))
array([[ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.]])
>>> h = cv2.calcHist(imBox[3].reshape((28,28)))
Traceback (most recent call last):
  File "<pyshell#440>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)))
TypeError: Required argument 'channels' (pos 2) not found
>>> h = cv2.calcHist(imBox[3].reshape((28,28)),1)
Traceback (most recent call last):
  File "<pyshell#441>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)),1)
TypeError: Required argument 'mask' (pos 3) not found
>>> h = cv2.calcHist(imBox[3].reshape((28,28)),1,[])
Traceback (most recent call last):
  File "<pyshell#442>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)),1,[])
TypeError: Required argument 'histSize' (pos 4) not found
>>> h = cv2.calcHist(imBox[3].reshape((28,28)),1,[],(30,32))
Traceback (most recent call last):
  File "<pyshell#443>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)),1,[],(30,32))
TypeError: Required argument 'ranges' (pos 5) not found
>>> h = cv2.calcHist(imBox[3].reshape((28,28)),1,[],(30,32),((0,180),(0,255)))
Traceback (most recent call last):
  File "<pyshell#444>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)),1,[],(30,32),((0,180),(0,255)))
SystemError: <built-in function calcHist> returned NULL without setting an error
>>> h = cv2.calcHist(imBox[3].reshape((28,28)),0,None,256,[0,256])
Traceback (most recent call last):
  File "<pyshell#445>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)),0,None,256,[0,256])
SystemError: <built-in function calcHist> returned NULL without setting an error
>>> h = cv2.calcHist(imBox[3].reshape((28,28)),[0],None,[256],[0,256])
Traceback (most recent call last):
  File "<pyshell#446>", line 1, in <module>
    h = cv2.calcHist(imBox[3].reshape((28,28)),[0],None,[256],[0,256])
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\histogram.cpp:1354: error: (-210)  in function cv::calcHist

>>> h = cv2.calcHist([imBox[3].reshape((28,28))],[0],None,[256],[0,256])
Traceback (most recent call last):
  File "<pyshell#447>", line 1, in <module>
    h = cv2.calcHist([imBox[3].reshape((28,28))],[0],None,[256],[0,256])
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\histogram.cpp:1354: error: (-210)  in function cv::calcHist

>>> I = imBox[3].reshape((28,28))
>>> cv2.imshow('hjb',I)
>>> I
array([[ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.],
       [ 173.,  244.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,  255.,
         255.]])
>>> I.dtype = cv2.CV_16S
Traceback (most recent call last):
  File "<pyshell#451>", line 1, in <module>
    I.dtype = cv2.CV_16S
TypeError: invalid data-type for array
>>> I.shape
(28, 28)
>>> I.size
784
>>> h = cv2.calcHist([I],[0],None,[256],[0,256])
Traceback (most recent call last):
  File "<pyshell#454>", line 1, in <module>
    h = cv2.calcHist([I],[0],None,[256],[0,256])
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\histogram.cpp:1354: error: (-210)  in function cv::calcHist

>>> I.type
Traceback (most recent call last):
  File "<pyshell#455>", line 1, in <module>
    I.type
AttributeError: 'numpy.ndarray' object has no attribute 'type'
>>> img.shape
(250, 250)
>>> img
array([[ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0, 10, ...,  8,  0,  0],
       ..., 
       [ 0,  0, 13, ..., 10,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0],
       [ 0,  0,  0, ...,  0,  0,  0]], dtype=uint8)
>>> I.dtype = uint8
Traceback (most recent call last):
  File "<pyshell#458>", line 1, in <module>
    I.dtype = uint8
NameError: name 'uint8' is not defined
>>> I.dtype = cv2.CV_32F
Traceback (most recent call last):
  File "<pyshell#459>", line 1, in <module>
    I.dtype = cv2.CV_32F
TypeError: invalid data-type for array
>>> h = cv2.calcHist([I],[0],None,[255],[0,255])
Traceback (most recent call last):
  File "<pyshell#460>", line 1, in <module>
    h = cv2.calcHist([I],[0],None,[255],[0,255])
cv2.error: C:\projects\opencv-python\opencv\modules\imgproc\src\histogram.cpp:1354: error: (-210)  in function cv::calcHist

>>> h = cv2.calcHist([img],[0],None,[255],[0,255])
>>> plt.plot(h)
[<matplotlib.lines.Line2D object at 0x000000B11E0D7E48>]
>>> plt.show()
>>> I.dtype =8
Traceback (most recent call last):
  File "<pyshell#464>", line 1, in <module>
    I.dtype =8
TypeError: invalid data-type for array
>>> I.dtype = [0,255]
Traceback (most recent call last):
  File "<pyshell#465>", line 1, in <module>
    I.dtype = [0,255]
TypeError: invalid data-type for array
>>> I.dtype =1
Traceback (most recent call last):
  File "<pyshell#466>", line 1, in <module>
    I.dtype =1
TypeError: invalid data-type for array
>>> I.dtype = np.int8
>>> h = cv2.calcHist([img],[0],None,[255],[0,255])
>>> plt.plot(h)
[<matplotlib.lines.Line2D object at 0x000000B11E10DEB8>]
>>> plt.show()
>>> h
array([[  5.92400000e+03],
       [  4.10000000e+01],
       [  4.10000000e+01],
       [  2.10000000e+01],
       [  3.30000000e+01],
       [  3.70000000e+01],
       [  2.60000000e+01],
       [  1.90000000e+01],
       [  2.40000000e+01],
       [  1.70000000e+01],
       [  1.21000000e+02],
       [  1.60000000e+01],
       [  1.70000000e+01],
       [  1.39000000e+02],
       [  1.80000000e+01],
       [  1.70000000e+01],
       [  1.10000000e+01],
       [  3.50000000e+01],
       [  1.86000000e+02],
       [  1.00000000e+01],
       [  1.20000000e+01],
       [  1.86000000e+02],
       [  1.10000000e+01],
       [  1.20000000e+01],
       [  1.10000000e+01],
       [  1.60000000e+01],
       [  1.20000000e+01],
       [  1.00000000e+01],
       [  2.81000000e+02],
       [  1.82000000e+02],
       [  1.60000000e+01],
       [  9.00000000e+00],
       [  1.88000000e+02],
       [  6.00000000e+00],
       [  2.80000000e+01],
       [  9.30000000e+01],
       [  7.00000000e+00],
       [  1.06000000e+02],
       [  6.30000000e+01],
       [  7.00000000e+00],
       [  4.00000000e+00],
       [  6.72000000e+02],
       [  2.50000000e+01],
       [  2.30000000e+01],
       [  1.57000000e+02],
       [  2.29000000e+02],
       [  8.00000000e+00],
       [  7.00000000e+00],
       [  2.29000000e+02],
       [  8.00000000e+00],
       [  1.02000000e+02],
       [  2.46000000e+02],
       [  6.00000000e+00],
       [  8.00000000e+00],
       [  8.00000000e+00],
       [  5.00000000e+00],
       [  1.28000000e+02],
       [  5.00000000e+00],
       [  5.40000000e+01],
       [  1.20000000e+01],
       [  6.00000000e+00],
       [  6.00000000e+00],
       [  1.06000000e+02],
       [  6.00000000e+00],
       [  2.30000000e+02],
       [  9.00000000e+00],
       [  7.00000000e+00],
       [  1.40000000e+01],
       [  1.94000000e+02],
       [  6.00000000e+00],
       [  1.50000000e+01],
       [  6.00000000e+00],
       [  6.00000000e+00],
       [  1.20000000e+01],
       [  6.00000000e+00],
       [  6.00000000e+00],
       [  8.00000000e+00],
       [  4.00000000e+00],
       [  9.00000000e+00],
       [  1.10000000e+01],
       [  4.00000000e+00],
       [  8.00000000e+00],
       [  1.90000000e+01],
       [  5.60000000e+01],
       [  5.00000000e+00],
       [  3.27000000e+02],
       [  8.00000000e+00],
       [  5.00000000e+00],
       [  3.00000000e+00],
       [  7.00000000e+00],
       [  5.20000000e+01],
       [  6.00000000e+00],
       [  7.00000000e+00],
       [  7.00000000e+00],
       [  6.00000000e+00],
       [  4.00000000e+00],
       [  1.20000000e+01],
       [  7.00000000e+00],
       [  1.78000000e+02],
       [  7.00000000e+00],
       [  6.00000000e+00],
       [  4.00000000e+00],
       [  1.60000000e+01],
       [  3.00000000e+00],
       [  8.00000000e+00],
       [  4.00000000e+00],
       [  7.00000000e+00],
       [  5.00000000e+00],
       [  4.00000000e+00],
       [  1.05000000e+02],
       [  9.00000000e+00],
       [  3.00000000e+00],
       [  7.00000000e+00],
       [  2.26000000e+02],
       [  5.00000000e+00],
       [  7.00000000e+00],
       [  5.00000000e+00],
       [  9.00000000e+00],
       [  3.00000000e+00],
       [  1.12000000e+02],
       [  8.00000000e+00],
       [  4.00000000e+00],
       [  7.00000000e+00],
       [  2.00000000e+00],
       [  7.00000000e+00],
       [  8.00000000e+00],
       [  9.00000000e+00],
       [  6.00000000e+00],
       [  6.00000000e+00],
       [  7.00000000e+00],
       [  1.00000000e+01],
       [  9.00000000e+00],
       [  9.00000000e+00],
       [  2.00000000e+00],
       [  1.50000000e+01],
       [  5.00000000e+00],
       [  1.90000000e+01],
       [  1.03000000e+02],
       [  6.00000000e+00],
       [  9.00000000e+00],
       [  5.00000000e+00],
       [  5.00000000e+00],
       [  8.00000000e+00],
       [  8.00000000e+00],
       [  7.00000000e+00],
       [  6.00000000e+00],
       [  9.00000000e+00],
       [  1.00000000e+01],
       [  5.00000000e+00],
       [  1.00000000e+01],
       [  4.00000000e+00],
       [  1.58000000e+02],
       [  5.00000000e+00],
       [  2.30000000e+01],
       [  1.10000000e+01],
       [  9.00000000e+00],
       [  4.00000000e+00],
       [  7.00000000e+00],
       [  5.00000000e+00],
       [  5.00000000e+00],
       [  5.00000000e+00],
       [  5.00000000e+00],
       [  6.00000000e+00],
       [  4.96000000e+02],
       [  7.00000000e+00],
       [  1.00000000e+01],
       [  8.00000000e+00],
       [  1.28000000e+02],
       [  7.00000000e+00],
       [  1.10000000e+01],
       [  1.48000000e+02],
       [  1.00000000e+01],
       [  6.00000000e+00],
       [  1.78000000e+02],
       [  3.00000000e+00],
       [  3.00000000e+00],
       [  4.49000000e+02],
       [  8.00000000e+00],
       [  4.00000000e+00],
       [  4.00000000e+00],
       [  9.00000000e+00],
       [  6.00000000e+00],
       [  6.00000000e+00],
       [  1.40000000e+01],
       [  5.00000000e+00],
       [  5.00000000e+00],
       [  7.90000000e+01],
       [  1.44000000e+02],
       [  5.00000000e+00],
       [  6.00000000e+00],
       [  3.00000000e+00],
       [  9.00000000e+00],
       [  3.55000000e+02],
       [  4.00000000e+00],
       [  8.00000000e+00],
       [  1.30000000e+01],
       [  8.20000000e+01],
       [  6.00000000e+00],
       [  5.00000000e+00],
       [  6.00000000e+00],
       [  3.00000000e+00],
       [  2.00000000e+00],
       [  8.00000000e+00],
       [  4.00000000e+00],
       [  2.00000000e+02],
       [  1.10000000e+01],
       [  5.00000000e+00],
       [  1.00000000e+01],
       [  7.00000000e+00],
       [  6.00000000e+00],
       [  6.00000000e+01],
       [  1.10000000e+01],
       [  7.00000000e+00],
       [  7.00000000e+00],
       [  6.00000000e+00],
       [  8.00000000e+00],
       [  2.00000000e+01],
       [  7.00000000e+00],
       [  1.54000000e+02],
       [  1.40000000e+01],
       [  1.10000000e+01],
       [  3.36000000e+02],
       [  1.28000000e+02],
       [  7.00000000e+00],
       [  4.00000000e+00],
       [  3.00000000e+00],
       [  9.00000000e+00],
       [  6.00000000e+00],
       [  4.00000000e+00],
       [  8.00000000e+00],
       [  1.20000000e+01],
       [  9.00000000e+00],
       [  1.50000000e+01],
       [  8.00000000e+00],
       [  6.00000000e+00],
       [  8.00000000e+00],
       [  1.80000000e+01],
       [  9.00000000e+00],
       [  1.13000000e+02],
       [  1.32000000e+02],
       [  1.40000000e+01],
       [  2.10000000e+01],
       [  1.30000000e+01],
       [  1.10000000e+01],
       [  2.60000000e+01],
       [  9.00000000e+00],
       [  1.20000000e+01],
       [  1.12000000e+02],
       [  2.20000000e+01],
       [  1.70000000e+01],
       [  2.20000000e+01],
       [  1.60000000e+01],
       [  2.20000000e+01],
       [  1.90000000e+01],
       [  2.00000000e+01]], dtype=float32)
>>> h.shape
(255, 1)
>>> plt.plot(h)
[<matplotlib.lines.Line2D object at 0x000000B11E17C630>]
>>> plt.xlim([0,255])
(0, 255)
>>> plt.show()
>>> 
